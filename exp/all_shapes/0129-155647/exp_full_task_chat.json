{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA prism with a star-shaped base of 8 points, a radius of 6 units, and a height of 10 units."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_star_prism(points=8, radius=6, height=10):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"StarPrismMesh\")\n    obj = bpy.data.objects.new(\"StarPrism\", mesh)\n\n    # Link the object to the current collection\n    bpy.context.collection.objects.link(obj)\n\n    # Create vertices and faces for the star-shaped base\n    vertices = []\n    faces = []\n    \n    for i in range(points):\n        angle = i * (2 * math.pi / points)\n        x = radius * math.cos(angle)\n        y = radius * math.sin(angle)\n        vertices.append((x, y, 0))  # Base vertices\n        vertices.append((x * 0.5, y * 0.5, height))  # Top vertices\n\n    # Create the faces for the base and sides\n    for i in range(points):\n        next_i = (i + 1) % points\n        # Base face\n        faces.append((i * 2, next_i * 2, next_i * 2 + 1, i * 2 + 1))\n        # Side faces\n        faces.append((i * 2, i * 2 + 1, next_i * 2 + 1, next_i * 2))\n\n    # Create the mesh\n    mesh.from_pydata(vertices, [], faces)\n    mesh.update()\n\n# Call the function to create the star prism\ncreate_star_prism()\n```"}]}