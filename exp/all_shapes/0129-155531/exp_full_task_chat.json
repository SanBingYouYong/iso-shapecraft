{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA tall, hexagonal prism with a base edge length of 5 units and a height of 15 units. Its edges are sharp, and its surfaces are smooth."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_hexagonal_prism(edge_length=5, height=15):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"HexagonalPrismMesh\")\n    obj = bpy.data.objects.new(\"HexagonalPrism\", mesh)\n\n    # Link the object to the current scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to define the geometry\n    bm = bmesh.new()\n\n    # Define the vertices for a hexagonal prism\n    half_edge = edge_length / 2\n    vertices = [\n        (half_edge * 1.0, 0, 0),\n        (half_edge * 0.5, half_edge * 1.732, 0),\n        (-half_edge * 0.5, half_edge * 1.732, 0),\n        (-half_edge * 1.0, 0, 0),\n        (-half_edge * 0.5, -half_edge * 1.732, 0),\n        (half_edge * 0.5, -half_edge * 1.732, 0),\n        (half_edge * 1.0, 0, height),\n        (half_edge * 0.5, half_edge * 1.732, height),\n        (-half_edge * 0.5, half_edge * 1.732, height),\n        (-half_edge * 1.0, 0, height),\n        (-half_edge * 0.5, -half_edge * 1.732, height),\n        (half_edge * 0.5, -half_edge * 1.732, height),\n    ]\n\n    # Create vertices in bmesh\n    verts = [bm.verts.new(v) for v in vertices]\n\n    # Create faces for the top and bottom\n    bm.faces.new(verts[0:6])  # Bottom face\n    bm.faces.new(verts[6:12]) # Top face\n\n    # Create side faces\n    for i in range(6):\n        bm.faces.new((verts[i], verts[(i + 1) % 6], verts[(i + 1) % 6 + 6], verts[i + 6]))\n\n    # Finish up\n    bm.to_mesh(mesh)\n    bm.free()\n\ncreate_hexagonal_prism()\n```"}]}