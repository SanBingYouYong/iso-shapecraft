{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nTwo identical cubes with edge lengths of 6 units intersecting each other at a 45-degree angle."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_intersecting_cubes():\n    # Clear existing mesh objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n    \n    # Create first cube\n    bpy.ops.mesh.primitive_cube_add(size=6, location=(0, 0, 0))\n    cube1 = bpy.context.object\n    \n    # Create second cube, rotated 45 degrees around the Z axis\n    bpy.ops.mesh.primitive_cube_add(size=6, location=(0, 0, 0))\n    cube2 = bpy.context.object\n    cube2.rotation_euler[2] = math.radians(45)\n    \ncreate_intersecting_cubes()\n```"}]}