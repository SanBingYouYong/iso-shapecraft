{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA rectangular plane measuring 20x15 units, undulating with a sine wave of amplitude 2 units and a wavelength of 5 units."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_undulating_plane(width, height, amplitude, wavelength, subdivisions):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"UndulatingPlane\")\n    obj = bpy.data.objects.new(\"UndulatingPlane\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create vertices\n    vertices = []\n    faces = []\n    \n    # Generate the vertices\n    for x in range(subdivisions):\n        for y in range(subdivisions):\n            x_pos = (x / (subdivisions - 1)) * width - (width / 2)\n            y_pos = (y / (subdivisions - 1)) * height - (height / 2)\n            z_pos = amplitude * math.sin((x_pos / wavelength) * (2 * math.pi))\n            vertices.append((x_pos, y_pos, z_pos))\n    \n    # Create faces\n    for x in range(subdivisions - 1):\n        for y in range(subdivisions - 1):\n            v1 = x * subdivisions + y\n            v2 = v1 + 1\n            v3 = v1 + subdivisions\n            v4 = v3 + 1\n            faces.append((v1, v2, v4, v3))\n    \n    # Create the mesh from the vertices and faces\n    mesh.from_pydata(vertices, [], faces)\n    mesh.update()\n\n# Parameters: width, height, amplitude, wavelength, subdivisions\ncreate_undulating_plane(20, 15, 2, 5, 30)\n```"}]}