{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA cylinder with an outer radius of 7 units, a wall thickness of 1 unit, and a height of 20 units."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_cylinder_with_wall_thickness(outer_radius, wall_thickness, height):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"CylinderWithWall\")\n    obj = bpy.data.objects.new(\"CylinderWithWall\", mesh)\n\n    # Link the object to the current collection\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh for the cylinder\n    bm = bmesh.new()\n\n    # Create the outer cylinder\n    bmesh.ops.create_cylinder(bm, cap_tris=True, radius=outer_radius, depth=height, segments=32)\n\n    # Create the inner cylinder\n    inner_radius = outer_radius - wall_thickness\n    bmesh.ops.create_cylinder(bm, cap_tris=True, radius=inner_radius, depth=height, segments=32)\n\n    # Get the geometry and remove the inner cylinder from the outer\n    bmesh.ops.delete(bm, geom=bm.verts[:] + bm.edges[:], context='FACES')\n\n    # Finish the bmesh and assign it to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Parameters\nouter_radius = 7\nwall_thickness = 1\nheight = 20\n\ncreate_cylinder_with_wall_thickness(outer_radius, wall_thickness, height)\n```"}]}