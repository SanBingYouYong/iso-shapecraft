{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA rectangular plane measuring 20x15 units, undulating with a sine wave of amplitude 2 units and a wavelength of 5 units."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_undulating_plane(width, depth, amplitude, wavelength):\n    # Create a rectangular plane\n    bpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n    plane = bpy.context.object\n    plane.scale = (width / 2, depth / 2, 1)\n    \n    # Enter edit mode to modify the vertices\n    bpy.ops.object.mode_set(mode='EDIT')\n    mesh = bmesh.from_edit_mesh(plane.data)\n    \n    # Undulate the plane using a sine wave\n    for v in mesh.verts:\n        x = v.co.x\n        v.co.z = amplitude * math.sin((x / wavelength) * (2 * math.pi))\n    \n    # Update the mesh and return to object mode\n    bmesh.update_edit_mesh(plane.data)\n    bpy.ops.object.mode_set(mode='OBJECT')\n\ncreate_undulating_plane(20, 15, 2, 5)\n```"}]}