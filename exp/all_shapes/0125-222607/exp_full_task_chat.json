{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nThree concentric spheres with radii of 2, 4, and 6 units, each having a matte finish and slightly different colors."}, {"role": "assistant", "content": "```python\nimport bpy\n\ndef create_concentric_spheres():\n    radii = [2, 4, 6]\n    colors = [(0.8, 0.1, 0.1, 1), (0.1, 0.8, 0.1, 1), (0.1, 0.1, 0.8, 1)]\n    \n    for radius, color in zip(radii, colors):\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=radius)\n        sphere = bpy.context.object\n        mat = bpy.data.materials.new(name=f\"Material_{radius}\")\n        mat.diffuse_color = color\n        sphere.data.materials.append(mat)\n        sphere.select_set(True)\n        bpy.ops.object.shade_smooth()\n        sphere.location = (0, 0, 0)\n\ncreate_concentric_spheres()\n```"}]}