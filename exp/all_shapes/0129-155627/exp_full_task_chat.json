{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA cone with a base radius of 5 units and a height of 12 units, featuring a spiraling groove along its surface."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_spiraling_cone(base_radius=5, height=12, turns=5, groove_depth=0.5):\n    # Create a cone\n    bpy.ops.mesh.primitive_cone_add(radius1=base_radius, depth=height)\n    cone = bpy.context.object\n    cone.name = \"SpiralingCone\"\n\n    # Add a new mesh for the groove\n    groove_mesh = bpy.data.meshes.new(\"GrooveMesh\")\n    groove_object = bpy.data.objects.new(\"Groove\", groove_mesh)\n\n    bpy.context.collection.objects.link(groove_object)\n\n    vertices = []\n    faces = []\n    \n    # Create vertices for the groove\n    for i in range(100):\n        angle = (i / 100) * (turns * 2 * math.pi)\n        z = (i / 100) * height\n        r = base_radius - (groove_depth * (i / 100))\n        x = r * math.cos(angle)\n        y = r * math.sin(angle)\n        vertices.append((x, y, z))\n\n    # Create faces for the groove (connecting the vertices)\n    for i in range(len(vertices) - 1):\n        if i < len(vertices) - 2:\n            faces.append((i, i + 1, i + 2))\n    \n    groove_mesh.from_pydata(vertices, [], faces)\n    groove_mesh.update()\n\ncreate_spiraling_cone()\n```"}]}