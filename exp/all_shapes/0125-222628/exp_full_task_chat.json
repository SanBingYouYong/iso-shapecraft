{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA cone with a base radius of 5 units and a height of 12 units, featuring a spiraling groove along its surface."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_cone_with_groove(base_radius=5, height=12, groove_depth=0.2, turns=10):\n    # Create a cone\n    bpy.ops.mesh.primitive_cone_add(radius1=base_radius, depth=height, location=(0, 0, height / 2))\n    cone = bpy.context.active_object\n    \n    # Add a spiral groove\n    for i in range(turns * 100):\n        angle = i * (2 * math.pi / 100)  # Angle for each segment\n        z = (i / 100) * height  # Height position\n        \n        # Calculate the radius at this height\n        radius = base_radius * (1 - (z / height))\n        \n        # Create a small circle for the groove\n        bpy.ops.mesh.primitive_circle_add(radius=groove_depth, location=(radius * math.cos(angle), radius * math.sin(angle), z))\n        groove = bpy.context.active_object\n        \n        # Add the groove to the cone\n        bpy.ops.object.select_all(action='DESELECT')\n        cone.select_set(True)\n        groove.select_set(True)\n        bpy.context.view_layer.objects.active = cone\n        bpy.ops.object.join()\n    \n    # Rename the final object\n    cone.name = \"ConeWithGroove\"\n\ncreate_cone_with_groove()\n```"}]}