{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA tall, hexagonal prism with a base edge length of 5 units and a height of 15 units. Its edges are sharp, and its surfaces are smooth."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_hexagonal_prism(base_edge_length, height):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"HexagonalPrism\")\n    obj = bpy.data.objects.new(\"HexagonalPrism\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create the mesh geometry\n    bm = bmesh.new()\n    \n    # Define the vertices of the hexagonal base\n    angle = 2 * 3.14159 / 6  # 360 degrees divided by 6 for hexagon\n    vertices = [(base_edge_length * 0.5 * (1 + 0.5 * (3**0.5)) * (1 if i % 2 == 0 else -1), \n                 base_edge_length * 0.5 * (3**0.5) * (1 if i % 2 == 0 else -1), \n                 0) for i in range(6)]\n    \n    # Create top and bottom vertices\n    bottom_verts = [bm.verts.new(v) for v in vertices]\n    top_verts = [bm.verts.new((v[0], v[1], height)) for v in vertices]\n\n    # Create faces for the bottom and top\n    bm.faces.new(bottom_verts)\n    bm.faces.new(top_verts)\n\n    # Create side faces\n    for i in range(6):\n        v1 = bottom_verts[i]\n        v2 = bottom_verts[(i + 1) % 6]\n        v3 = top_verts[(i + 1) % 6]\n        v4 = top_verts[i]\n        bm.faces.new((v1, v2, v3, v4))\n\n    # Finalize the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Call the function to create the hexagonal prism\ncreate_hexagonal_prism(5, 15)\n```"}]}