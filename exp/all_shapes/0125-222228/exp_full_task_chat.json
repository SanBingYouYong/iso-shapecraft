{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA tall, hexagonal prism with a base edge length of 5 units and a height of 15 units. Its edges are sharp, and its surfaces are smooth."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_hexagonal_prism(base_edge_length=5, height=15):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"HexagonalPrism\")\n    obj = bpy.data.objects.new(\"HexagonalPrism\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh for the hexagonal prism\n    bm = bmesh.new()\n\n    # Define the vertices of the hexagonal prism\n    angle = (2 * 3.14159) / 6  # 360 degrees divided by 6\n    vertices = []\n    for i in range(6):\n        x = base_edge_length * 0.5 * (1 + (0 if i % 2 == 0 else 1)) * (1 if i < 3 else -1) * (1 if i % 3 == 0 else 0)\n        y = base_edge_length * 0.5 * (1 + (0 if i % 2 == 1 else 1)) * (1 if i < 3 else -1) * (1 if i % 3 == 1 else 0)\n        z = 0\n        vertices.append(bm.verts.new((x, y, z)))\n        vertices.append(bm.verts.new((x, y, height)))\n\n    # Create faces for the hexagonal prism\n    for i in range(6):\n        bm.faces.new((vertices[i], vertices[(i + 1) % 6], vertices[(i + 1) % 6 + 6], vertices[i + 6]))\n\n    # Create the top and bottom faces\n    bm.faces.new(vertices[:6])  # Bottom face\n    bm.faces.new(vertices[6:])  # Top face\n\n    # Finalize the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Call the function to create the hexagonal prism\ncreate_hexagonal_prism()\n```"}]}