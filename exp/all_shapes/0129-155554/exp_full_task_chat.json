{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA square-based pyramid with a base length of 8 units, a height of 12 units, and a flat top at 9 units."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_square_based_pyramid(base_length=8, height=12, flat_top_height=9):\n    # Calculate the coordinates for the pyramid's vertices\n    half_base = base_length / 2\n    vertices = [\n        (-half_base, -half_base, 0),  # Base vertex 1\n        (half_base, -half_base, 0),   # Base vertex 2\n        (half_base, half_base, 0),    # Base vertex 3\n        (-half_base, half_base, 0),   # Base vertex 4\n        (0, 0, flat_top_height)        # Apex vertex\n    ]\n    \n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Pyramid\")\n    obj = bpy.data.objects.new(\"Pyramid\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a bmesh to construct the geometry\n    bm = bmesh.new()\n    \n    # Add vertices\n    verts = [bm.verts.new(v) for v in vertices]\n    \n    # Create faces for the pyramid\n    bm.faces.new((verts[0], verts[1], verts[4]))  # Base 1\n    bm.faces.new((verts[1], verts[2], verts[4]))  # Base 2\n    bm.faces.new((verts[2], verts[3], verts[4]))  # Base 3\n    bm.faces.new((verts[3], verts[0], verts[4]))  # Base 4\n    bm.faces.new((verts[0], verts[1], verts[2], verts[3]))  # Base face\n    \n    # Finish the bmesh and write to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\ncreate_square_based_pyramid()\n```"}]}