{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA square-based pyramid with a base length of 8 units, a height of 12 units, and a flat top at 9 units."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_square_based_pyramid(base_length, height, top_height):\n    # Create a new mesh and a new object\n    mesh = bpy.data.meshes.new(\"SquareBasedPyramid\")\n    obj = bpy.data.objects.new(\"SquareBasedPyramid\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh object\n    bm = bmesh.new()\n\n    # Define the vertices\n    half_base = base_length / 2\n    vertices = [\n        (-half_base, -half_base, 0),  # Vertex 0\n        (half_base, -half_base, 0),   # Vertex 1\n        (half_base, half_base, 0),    # Vertex 2\n        (-half_base, half_base, 0),   # Vertex 3\n        (0, 0, top_height)             # Vertex 4 (top vertex)\n    ]\n\n    # Add vertices to bmesh\n    for v in vertices:\n        bm.verts.new(v)\n\n    # Ensure the bmesh updates\n    bm.verts.ensure_lookup_table()\n\n    # Create faces (base and four triangular sides)\n    bm.faces.new((bm.verts[0], bm.verts[1], bm.verts[2], bm.verts[3]))  # Base face\n    bm.faces.new((bm.verts[0], bm.verts[1], bm.verts[4]))  # Side face 1\n    bm.faces.new((bm.verts[1], bm.verts[2], bm.verts[4]))  # Side face 2\n    bm.faces.new((bm.verts[2], bm.verts[3], bm.verts[4]))  # Side face 3\n    bm.faces.new((bm.verts[3], bm.verts[0], bm.verts[4]))  # Side face 4\n\n    # Finalize the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n    # Set object properties\n    obj.location = (0, 0, height / 2)\n\n# Parameters for the pyramid\nbase_length = 8\nheight = 12\ntop_height = 9\n\ncreate_square_based_pyramid(base_length, height, top_height)\n```"}]}