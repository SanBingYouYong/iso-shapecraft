{
    "messages": [
        {
            "role": "user",
            "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\n# Shape Description\nA chair with four legs, a seat, and a backrest. The legs should be sturdy and slightly angled outwards for stability. The seat should be flat and comfortable, and the backrest should be slightly curved to provide ergonomic support."
        },
        {
            "role": "assistant",
            "content": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef draw_chair():\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n\n    # Define chair dimensions\n    seat_height = 0.5\n    seat_width = 1\n    seat_depth = 1\n    leg_height = 1\n    backrest_height = 0.5\n    backrest_thickness = 0.1\n    leg_thickness = 0.1\n\n    # Create seat\n    seat = np.array([[0, 0, seat_height],\n                     [seat_width, 0, seat_height],\n                     [seat_width, seat_depth, seat_height],\n                     [0, seat_depth, seat_height],\n                     [0, 0, seat_height]])\n\n    # Create legs\n    leg1 = np.array([[0, 0, 0],\n                     [0, 0, leg_height],\n                     [leg_thickness, 0, leg_height],\n                     [leg_thickness, 0, 0],\n                     [0, 0, 0]])\n    \n    leg2 = leg1 + np.array([[seat_width, 0, 0], [seat_width, 0, 0], [seat_width, 0, 0], [seat_width, 0, 0]])\n    leg3 = leg1 + np.array([[0, seat_depth, 0], [0, seat_depth, 0], [0, seat_depth, 0], [0, seat_depth, 0]])\n    leg4 = leg2 + np.array([[0, seat_depth, 0], [0, seat_depth, 0], [0, seat_depth, 0], [0, seat_depth, 0]])\n\n    # Create backrest\n    backrest = np.array([[0, seat_depth, seat_height],\n                         [seat_width, seat_depth, seat_height],\n                         [seat_width, seat_depth + backrest_thickness, seat_height + backrest_height],\n                         [0, seat_depth + backrest_thickness, seat_height + backrest_height],\n                         [0, seat_depth, seat_height]])\n\n    # Plot seat\n    ax.add_collection3d(plt.Polygon(seat, color='brown', alpha=0.5))\n    \n    # Plot legs\n    ax.add_collection3d(plt.Polygon(leg1, color='saddlebrown', alpha=0.5))\n    ax.add_collection3d(plt.Polygon(leg2, color='saddlebrown', alpha=0.5))\n    ax.add_collection3d(plt.Polygon(leg3, color='saddlebrown', alpha=0.5))\n    ax.add_collection3d(plt.Polygon(leg4, color='saddlebrown', alpha=0.5))\n    \n    # Plot backrest\n    ax.add_collection3d(plt.Polygon(backrest, color='brown', alpha=0.5))\n    \n    # Set limits and labels\n    ax.set_xlim([0, seat_width + 0.5])\n    ax.set_ylim([-0.5, seat_depth + 0.5])\n    ax.set_zlim([0, leg_height + seat_height])\n    ax.set_xlabel('X axis')\n    ax.set_ylabel('Y axis')\n    ax.set_zlabel('Z axis')\n    \n    plt.show()\n\ndraw_chair()\n```"
        }
    ]
}