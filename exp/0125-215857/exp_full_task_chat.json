{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA torus with a minor radius of 3 units and a major radius of 10 units, twisted along its central axis by 45 degrees."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_twisted_torus(minor_radius, major_radius, twist_angle):\n    # Clear existing mesh objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete(use_global=False)\n\n    # Create a torus\n    bpy.ops.mesh.primitive_torus_add(align='WORLD', location=(0, 0, 0), \n                                      major_radius=major_radius, \n                                      minor_radius=minor_radius, \n                                      major_segments=48, \n                                      minor_segments=24)\n    \n    # Get the active object (the torus we just created)\n    torus = bpy.context.active_object\n    \n    # Apply the twist along the z-axis\n    bpy.ops.object.transform_apply(rotation=True)\n    torus.rotation_euler[2] += math.radians(twist_angle)\n\n# Parameters for the torus\nminor_radius = 3\nmajor_radius = 10\ntwist_angle = 45\n\ncreate_twisted_torus(minor_radius, major_radius, twist_angle)\n```"}]}