{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA chair with four legs, a seat, and a backrest. The legs should be sturdy and slightly angled outwards for stability. The seat should be flat and comfortable, and the backrest should be slightly curved to provide ergonomic support."}, {"role": "assistant", "content": "```python\nimport bpy\n\ndef create_chair():\n    # Clear existing mesh objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    # Create chair legs\n    leg_height = 1.0\n    leg_radius = 0.05\n    leg_offset = 0.4\n\n    for x in [-leg_offset, leg_offset]:\n        for y in [-leg_offset, leg_offset]:\n            bpy.ops.mesh.primitive_cylinder_add(\n                radius=leg_radius, depth=leg_height, location=(x, y, leg_height / 2)\n            )\n\n    # Create seat\n    seat_width = leg_offset * 2\n    seat_depth = leg_offset * 2\n    seat_thickness = 0.1\n    bpy.ops.mesh.primitive_cube_add(\n        size=1, location=(0, 0, leg_height + seat_thickness / 2)\n    )\n    bpy.ops.transform.resize(value=(seat_width, seat_depth, seat_thickness))\n\n    # Create backrest\n    backrest_width = seat_width\n    backrest_height = 0.5\n    backrest_thickness = 0.05\n    bpy.ops.mesh.primitive_cube_add(\n        size=1, location=(0, -leg_offset, leg_height + seat_thickness + backrest_height / 2)\n    )\n    bpy.ops.transform.resize(value=(backrest_width, backrest_thickness, backrest_height))\n    \n    # Apply smooth shading\n    for obj in bpy.context.selected_objects:\n        bpy.ops.object.shade_smooth()\n\ncreate_chair()\n```"}]}