{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA tall, hexagonal prism with a base edge length of 5 units and a height of 15 units. Its edges are sharp, and its surfaces are smooth."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom mathutils import Vector\n\ndef create_hexagonal_prism(base_edge_length, height):\n    # Clear existing objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"HexagonalPrism\")\n    obj = bpy.data.objects.new(\"HexagonalPrism\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create bmesh\n    bm = bmesh.new()\n\n    # Define the vertices for a hexagonal prism\n    angle_offset = 360 / 6\n    vertices = []\n    for i in range(6):\n        angle = math.radians(i * angle_offset)\n        x = base_edge_length * math.cos(angle)\n        y = base_edge_length * math.sin(angle)\n        vertices.append(Vector((x, y, 0)))\n        vertices.append(Vector((x, y, height)))\n\n    # Create vertices in bmesh\n    for v in vertices:\n        bm.verts.new(v)\n    \n    bm.verts.ensure_lookup_table()\n\n    # Create faces for the sides of the prism\n    for i in range(6):\n        v1 = bm.verts[i]\n        v2 = bm.verts[(i + 1) % 6]\n        v3 = bm.verts[(i + 1) % 6 + 6]\n        v4 = bm.verts[i + 6]\n        bm.faces.new((v1, v2, v3, v4))\n    \n    # Create top and bottom faces\n    bm.faces.new((bm.verts[0], bm.verts[1], bm.verts[3], bm.verts[2]))  # Bottom face\n    bm.faces.new((bm.verts[6], bm.verts[7], bm.verts[5], bm.verts[4]))  # Top face\n\n    # Finalize the bmesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Call the function with specified dimensions\ncreate_hexagonal_prism(base_edge_length=5, height=15)\n```"}]}