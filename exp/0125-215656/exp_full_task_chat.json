{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA tall, hexagonal prism with a base edge length of 5 units and a height of 15 units. Its edges are sharp, and its surfaces are smooth."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_hexagonal_prism(base_edge_length, height):\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.mesh.primitive_cylinder_add(vertices=6, radius=base_edge_length, depth=height, location=(0, 0, height / 2))\n    prism = bpy.context.object\n    bpy.ops.object.shade_smooth()\n    \n    # Adjust the scale to form a prism (if necessary)\n    prism.scale[2] = height / 2  # Ensure it is a prism, height is adjusted\n\ncreate_hexagonal_prism(5, 15)\n```"}]}{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA torus with a minor radius of 3 units and a major radius of 10 units, twisted along its central axis by 45 degrees."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_twisted_torus(minor_radius, major_radius, twist_angle):\n    # Create a torus\n    bpy.ops.mesh.primitive_torus_add(major_radius=major_radius, minor_radius=minor_radius, align='WORLD', location=(0, 0, 0), rotation=(0, 0, 0))\n    \n    # Get the active object (the torus)\n    torus = bpy.context.active_object\n    \n    # Apply a twist by rotating the torus around its axis\n    torus.rotation_euler[0] += math.radians(twist_angle)\n\n# Parameters for the torus\nminor_radius = 3\nmajor_radius = 10\ntwist_angle = 45\n\ncreate_twisted_torus(minor_radius, major_radius, twist_angle)\n```"}]}{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nThree concentric spheres with radii of 2, 4, and 6 units, each having a matte finish and slightly different colors."}, {"role": "assistant", "content": "```python\nimport bpy\n\ndef create_concentric_spheres():\n    colors = [(1, 0, 0, 1), (0, 1, 0, 1), (0, 0, 1, 1)]  # Red, Green, Blue\n    radii = [2, 4, 6]\n    \n    for radius, color in zip(radii, colors):\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=radius)\n        sphere = bpy.context.object\n        sphere.location = (0, 0, 0)\n\n        # Create a material\n        material = bpy.data.materials.new(name=f\"Material_{radius}\")\n        material.use_nodes = True\n        bsdf = material.node_tree.nodes.get(\"Principled BSDF\")\n        bsdf.inputs['Base Color'].default_value = color\n        bsdf.inputs['Roughness'].default_value = 0.8  # Matte finish\n        \n        # Assign material to the sphere\n        if sphere.data.materials:\n            sphere.data.materials[0] = material\n        else:\n            sphere.data.materials.append(material)\n\ncreate_concentric_spheres()\n```"}]}