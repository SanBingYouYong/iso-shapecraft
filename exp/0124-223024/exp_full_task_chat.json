{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\n# Shape Description\nAn upright, rectangular shape that connects to the rear of the chair seat. It should be taller than the seat and have a slight incline for ergonomic support. The edges can be rounded to match the style of the seat."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_backrest():\n    # Set dimensions\n    width = 0.5\n    depth = 0.1\n    height = 0.6\n    incline_angle = 15  # degrees\n\n    # Create a new mesh\n    mesh = bpy.data.meshes.new(\"Backrest\")\n    obj = bpy.data.objects.new(\"Backrest\", mesh)\n\n    # Link the object to the current collection\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to define the geometry\n    bm = bmesh.new()\n\n    # Define vertices for a rectangular prism with an incline\n    v1 = bm.verts.new((0, -depth/2, 0))  # Bottom left\n    v2 = bm.verts.new((width, -depth/2, 0))  # Bottom right\n    v3 = bm.verts.new((width, depth/2, 0))  # Top right\n    v4 = bm.verts.new((0, depth/2, 0))  # Top left\n    v5 = bm.verts.new((0, -depth/2, height))  # Bottom left back\n    v6 = bm.verts.new((width, -depth/2, height))  # Bottom right back\n    v7 = bm.verts.new((width, depth/2, height))  # Top right back\n    v8 = bm.verts.new((0, depth/2, height))  # Top left back\n\n    # Create faces\n    bm.faces.new((v1, v2, v3, v4))  # Front face\n    bm.faces.new((v5, v6, v7, v8))  # Back face\n    bm.faces.new((v1, v2, v6, v5))  # Bottom face\n    bm.faces.new((v3, v4, v8, v7))  # Top face\n    bm.faces.new((v1, v4, v8, v5))  # Left face\n    bm.faces.new((v2, v3, v7, v6))  # Right face\n\n    # Apply incline\n    for vert in bm.verts:\n        vert.co.z += (vert.co.x / width) * (height * (incline_angle / 90))\n\n    # Create the mesh from the bmesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n    # Set the origin to the bottom center of the backrest\n    bpy.context.view_layer.objects.active = obj\n    bpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_VOLUME', center='MEDIAN')\n\ncreate_backrest()\n```"}]}