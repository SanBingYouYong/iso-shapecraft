{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA tall, hexagonal prism with a base edge length of 5 units and a height of 15 units. Its edges are sharp, and its surfaces are smooth."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_hexagonal_prism(base_edge_length, height):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"HexagonalPrism\")\n    obj = bpy.data.objects.new(\"HexagonalPrism\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to build the geometry\n    bm = bmesh.new()\n\n    # Define the vertices for a hexagon\n    vertices = []\n    for i in range(6):\n        angle = i * (360 / 6) * (3.14159 / 180)  # Convert degrees to radians\n        x = base_edge_length * 0.5 * (1 + (i % 2)) * (1 if i % 2 == 0 else 0.866)\n        y = base_edge_length * 0.5 * (1 - (i % 2)) * (1 if i % 2 == 1 else 0.866)\n        vertices.append(bm.verts.new((x, y, 0)))\n        vertices.append(bm.verts.new((x, y, height)))\n\n    # Create faces\n    for i in range(6):\n        bm.faces.new((vertices[i*2], vertices[(i*2+1) % 12], vertices[((i+1)*2+1) % 12], vertices[((i+1)*2) % 12]))\n\n    # Finalize the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Parameters for the hexagonal prism\nbase_edge_length = 5\nheight = 15\n\ncreate_hexagonal_prism(base_edge_length, height)\n```"}]}{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA torus with a minor radius of 3 units and a major radius of 10 units, twisted along its central axis by 45 degrees."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_twisted_torus(major_radius, minor_radius, twist_angle):\n    # Create a torus\n    bpy.ops.mesh.primitive_torus_add(major_radius=major_radius, minor_radius=minor_radius, location=(0, 0, 0))\n    torus = bpy.context.object\n    \n    # Apply twisting\n    bpy.ops.object.mode_set(mode='EDIT')\n    bpy.ops.mesh.select_all(action='SELECT')\n    bpy.ops.transform.rotate(value=math.radians(twist_angle), orient_axis='Z')\n    bpy.ops.object.mode_set(mode='OBJECT')\n\n# Parameters: major radius, minor radius, twist angle\ncreate_twisted_torus(10, 3, 45)\n```"}]}{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nThree concentric spheres with radii of 2, 4, and 6 units, each having a matte finish and slightly different colors."}, {"role": "assistant", "content": "```python\nimport bpy\n\ndef create_concentric_spheres():\n    # Define the radii and colors for the spheres\n    radii = [2, 4, 6]\n    colors = [(1, 0, 0, 1), (0, 1, 0, 1), (0, 0, 1, 1)]  # Red, Green, Blue\n\n    for i, radius in enumerate(radii):\n        # Create a new sphere\n        bpy.ops.mesh.primitive_uv_sphere_add(radius=radius, location=(0, 0, 0))\n        sphere = bpy.context.object\n        \n        # Set the material properties\n        mat = bpy.data.materials.new(name=f\"Material_{i}\")\n        mat.use_nodes = True\n        bsdf = mat.node_tree.nodes.get(\"Principled BSDF\")\n        bsdf.inputs['Base Color'].default_value = colors[i]\n        bsdf.inputs['Roughness'].default_value = 0.8  # Matte finish\n        \n        # Assign the material to the sphere\n        if sphere.data.materials:\n            sphere.data.materials[0] = mat\n        else:\n            sphere.data.materials.append(mat)\n\ncreate_concentric_spheres()\n```"}]}