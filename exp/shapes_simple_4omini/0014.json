{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA pentagon with five sides."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_pentagon(size=1):\n    # Create a new mesh and a new object\n    mesh = bpy.data.meshes.new(\"Pentagon\")\n    obj = bpy.data.objects.new(\"Pentagon\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to define the pentagon geometry\n    bm = bmesh.new()\n    \n    # Define the vertices of the pentagon\n    vertices = [\n        (size * 0, size, 0),  # Top vertex\n        (size * 0.951, size * 0.309, 0),  # Top right vertex\n        (size * 0.588, size * -0.809, 0),  # Bottom right vertex\n        (size * -0.588, size * -0.809, 0),  # Bottom left vertex\n        (size * -0.951, size * 0.309, 0)   # Top left vertex\n    ]\n    \n    # Create the vertices in the bmesh\n    verts = [bm.verts.new(v) for v in vertices]\n\n    # Create the pentagon face\n    bm.faces.new(verts)\n\n    # Update the mesh with the bmesh data\n    bm.to_mesh(mesh)\n    bm.free()\n\ncreate_pentagon()\n```"}]}