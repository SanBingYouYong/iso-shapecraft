{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA crescent moon shape formed by a partial circle and another circle."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_crescent_moon(radius_outer, radius_inner, location):\n    # Create the outer circle (full moon)\n    bpy.ops.mesh.primitive_circle_add(radius=radius_outer, location=location)\n    outer_circle = bpy.context.object\n    \n    # Create the inner circle (cutout)\n    bpy.ops.mesh.primitive_circle_add(radius=radius_inner, location=(location[0] + radius_outer - radius_inner, location[1], location[2]))\n    inner_circle = bpy.context.object\n    \n    # Join the two circles into one object\n    bpy.ops.object.select_all(action='DESELECT')\n    outer_circle.select_set(True)\n    inner_circle.select_set(True)\n    bpy.context.view_layer.objects.active = outer_circle\n    bpy.ops.object.join()\n    \n    # Add a solidify modifier to give thickness to the crescent shape\n    bpy.ops.object.modifier_add(type='SOLIDIFY')\n    bpy.context.object.modifiers[\"Solidify\"].thickness = 0.1\n\n# Parameters for the crescent moon shape\nouter_radius = 1.0\ninner_radius = 0.7\nlocation = (0, 0, 0)\n\ncreate_crescent_moon(outer_radius, inner_radius, location)\n```"}]}