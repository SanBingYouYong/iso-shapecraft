{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA circular sector with a small radius."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_circular_sector(radius, angle, location):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"CircularSector\")\n    obj = bpy.data.objects.new(\"CircularSector\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create vertices for the circular sector\n    vertices = []\n    vertices.append((0, 0, 0))  # Center vertex\n    segments = 32  # Number of segments for the arc\n    for i in range(segments + 1):\n        theta = (angle / segments) * i\n        x = radius * math.cos(theta)\n        y = radius * math.sin(theta)\n        vertices.append((x, y, 0))\n\n    # Create faces for the circular sector\n    faces = []\n    for i in range(1, segments + 1):\n        faces.append((0, i, i + 1 if i + 1 <= segments else 1))\n\n    # Create the mesh from vertices and faces\n    mesh.from_pydata(vertices, [], faces)\n    mesh.update()\n\n    # Set the location of the object\n    obj.location = location\n\n# Parameters for the circular sector\nradius = 1.0\nangle = math.radians(90)  # 90 degrees in radians\nlocation = (0, 0, 0)\n\ncreate_circular_sector(radius, angle, location)\n```"}]}