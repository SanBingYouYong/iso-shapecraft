{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA rounded diamond shape resembling a leaf."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nimport math\n\ndef create_rounded_diamond_shape():\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"RoundedDiamond\")\n    obj = bpy.data.objects.new(\"RoundedDiamond\", mesh)\n\n    # Link the object to the current collection\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to define the geometry\n    bm = bmesh.new()\n    \n    # Define parameters for the rounded diamond shape\n    radius = 1.0\n    height = 2.0\n    segments = 16\n\n    # Create the base shape\n    for i in range(segments):\n        angle = math.radians(i * (360 / segments))\n        x = radius * math.sin(angle)\n        y = radius * math.cos(angle)\n\n        # Create the top and bottom vertices\n        bmesh.ops.create_circle(bm, cap_tris=True, radius=radius, location=(x, y, height / 2), segments=segments)\n        bmesh.ops.create_circle(bm, cap_tris=True, radius=radius, location=(x, y, -height / 2), segments=segments)\n\n    # Create the diamond shape by connecting the vertices\n    for i in range(segments):\n        v1 = bm.verts[i]\n        v2 = bm.verts[(i + 1) % segments]\n        v3 = bm.verts[i + segments]\n        v4 = bm.verts[(i + 1) % segments + segments]\n\n        # Create faces for the sides\n        bmesh.ops.create_face(bm, verts=[v1, v2, v4, v3])\n\n    # Finalize the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n    # Set the object's origin to the geometry's center\n    bpy.context.view_layer.objects.active = obj\n    bpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_VOLUME', center='MEDIAN')\n\ncreate_rounded_diamond_shape()\n```"}]}