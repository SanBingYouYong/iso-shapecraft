{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nAn isosceles triangle with two equal sides."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom mathutils import Vector\n\ndef create_isosceles_triangle(base_length, height):\n    # Create a new mesh and a new object\n    mesh = bpy.data.meshes.new(\"IsoscelesTriangle\")\n    obj = bpy.data.objects.new(\"IsoscelesTriangle\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to work with\n    bm = bmesh.new()\n\n    # Define the vertices of the isosceles triangle\n    v1 = bm.verts.new((0, 0, 0))  # Bottom left\n    v2 = bm.verts.new((base_length, 0, 0))  # Bottom right\n    v3 = bm.verts.new((base_length / 2, height, 0))  # Top vertex\n\n    # Create the face using the defined vertices\n    bm.faces.new((v1, v2, v3))\n\n    # Write the bmesh data to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Parameters for the isosceles triangle\nbase_length = 2.0\nheight = 1.5\n\ncreate_isosceles_triangle(base_length, height)\n```"}]}