{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA slice of pie shape with a curved edge."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_pie_slice(radius=1, angle=90, location=(0, 0, 0)):\n    bpy.ops.object.select_all(action='DESELECT')\n    \n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(name=\"PieSlice\")\n    obj = bpy.data.objects.new(\"PieSlice\", mesh)\n    \n    # Link the object to the collection\n    bpy.context.collection.objects.link(obj)\n    \n    # Create the geometry of the pie slice\n    verts = [(0, 0, 0)]  # Center vertex\n    edges = []\n    faces = []\n\n    # Calculate the number of segments based on the angle\n    num_segments = 32  # More segments for a smoother curve\n    segment_angle = math.radians(angle / num_segments)\n\n    for i in range(num_segments + 1):\n        theta = i * segment_angle\n        x = radius * math.cos(theta)\n        y = radius * math.sin(theta)\n        verts.append((x, y, 0))\n\n        if i > 0:\n            edges.append((0, i))  # Connect center to outer vertices\n            if i < num_segments:\n                faces.append((0, i, i + 1))  # Create face with center and two outer vertices\n\n    # Create the mesh from the gathered vertices, edges, and faces\n    mesh.from_pydata(verts, edges, faces)\n    mesh.update()\n\n    # Move the object to the desired location\n    obj.location = location\n\n    # Set the object as active\n    bpy.context.view_layer.objects.active = obj\n    obj.select_set(True)\n\ncreate_pie_slice()\n```"}]}