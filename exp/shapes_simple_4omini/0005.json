{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA hexagon with six equal sides."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_hexagon(radius):\n    vertices = []\n    edges = []\n    \n    # Calculate the vertices of the hexagon\n    for i in range(6):\n        angle = math.radians(60 * i)\n        x = radius * math.cos(angle)\n        y = radius * math.sin(angle)\n        vertices.append((x, y, 0))\n\n    # Create the edges connecting the vertices\n    for i in range(6):\n        edges.append((i, (i + 1) % 6))\n\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Hexagon\")\n    obj = bpy.data.objects.new(\"Hexagon\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create the mesh from the vertices and edges\n    mesh.from_pydata(vertices, edges, [])\n    mesh.update()\n\n# Create a hexagon with a specified radius\ncreate_hexagon(1)\n```"}]}