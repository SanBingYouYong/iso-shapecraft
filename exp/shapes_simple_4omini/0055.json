{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA flower-like shape with five rounded petals."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_flower_shape():\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"FlowerMesh\")\n    flower_object = bpy.data.objects.new(\"Flower\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(flower_object)\n    \n    # Create geometry\n    vertices = []\n    faces = []\n    \n    # Parameters for the flower\n    petal_count = 5\n    petal_radius = 1.0\n    petal_height = 0.5\n    petal_angle = 2 * math.pi / petal_count\n    \n    # Create vertices for the petals\n    for i in range(petal_count):\n        angle = i * petal_angle\n        x = petal_radius * math.cos(angle)\n        y = petal_radius * math.sin(angle)\n        \n        # Add petal vertices\n        vertices.append((x, y, 0))\n        vertices.append((x * 0.5, y * 0.5, petal_height))  # Top of the petal\n        \n        # Create faces between the vertices\n        if i > 0:\n            faces.append((2 * (i - 1), 2 * (i - 1) + 1, 2 * i + 1, 2 * i))\n    \n    # Closing the last petal face\n    faces.append((2 * (petal_count - 1), 2 * (petal_count - 1) + 1, 1, 0))\n    \n    # Create the mesh from the vertices and faces\n    mesh.from_pydata(vertices, [], faces)\n    mesh.update()\n\ncreate_flower_shape()\n```"}]}