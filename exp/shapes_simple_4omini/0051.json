{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA bowtie shape with two triangles meeting at a point."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_bowtie():\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Bowtie\")\n    obj = bpy.data.objects.new(\"Bowtie\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to construct the geometry\n    bm = bmesh.new()\n\n    # Define the vertices for the bowtie shape\n    v1 = bm.verts.new((0, 1, 0))  # Top triangle point\n    v2 = bm.verts.new((-1, 0, 0))  # Bottom left triangle point\n    v3 = bm.verts.new((1, 0, 0))  # Bottom right triangle point\n    v4 = bm.verts.new((0, -1, 0))  # Bottom triangle point\n    v5 = bm.verts.new((-1, 0, 0))  # Bottom left triangle point (again)\n    v6 = bm.verts.new((1, 0, 0))  # Bottom right triangle point (again)\n\n    # Create the faces for the two triangles\n    bm.faces.new((v1, v2, v3))  # Top triangle\n    bm.faces.new((v4, v5, v6))  # Bottom triangle\n\n    # Finish up\n    bm.to_mesh(mesh)\n    bm.free()\n\ncreate_bowtie()\n```"}]}