{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA rectangle with opposite sides that are equal in length."}, {"role": "assistant", "content": "```python\nimport bpy\n\ndef create_rectangle(length, width):\n    # Create a new mesh and a new object\n    mesh = bpy.data.meshes.new(\"RectangleMesh\")\n    obj = bpy.data.objects.new(\"Rectangle\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Define the vertices and faces of the rectangle\n    verts = [\n        (0, 0, 0),  # Bottom left\n        (length, 0, 0),  # Bottom right\n        (length, width, 0),  # Top right\n        (0, width, 0)  # Top left\n    ]\n    \n    faces = [(0, 1, 2, 3)]  # One face for the rectangle\n    \n    # Create the mesh from the vertices and faces\n    mesh.from_pydata(verts, [], faces)\n    mesh.update()\n\n# Call the function with desired dimensions\ncreate_rectangle(2, 1)\n```"}]}