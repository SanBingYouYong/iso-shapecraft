{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA simple musical note shape."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_musical_note():\n    # Create a new mesh\n    mesh = bpy.data.meshes.new(\"MusicalNote\")\n    obj = bpy.data.objects.new(\"MusicalNote\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a bmesh to build the note shape\n    bm = bmesh.new()\n    \n    # Define the note's geometry\n    # Creating the circular part of the note\n    bmesh.ops.create_circle(bm, cap_tris=True, radius=0.5, location=(0, 0, 0))\n    \n    # Extrude the circle to create the body of the note\n    for v in bm.verts:\n        v.co.z += 1  # Height of the note\n    \n    # Create the stem of the note\n    stem_verts = [\n        (0, 0, 1),  # Base of the stem\n        (0, -0.1, 2),  # Top of the stem\n        (0, 0.1, 2),  # Top of the stem (opposite side)\n    ]\n    \n    stem_faces = [(0, 1, 2)]\n    \n    # Create and add the stem geometry\n    stem_mesh = bpy.data.meshes.new(\"NoteStem\")\n    stem_obj = bpy.data.objects.new(\"NoteStem\", stem_mesh)\n    \n    bpy.context.collection.objects.link(stem_obj)\n    \n    # Create the stem mesh\n    stem_mesh.from_pydata(stem_verts, [], stem_faces)\n    stem_mesh.update()\n\n    # Combine the note and the stem into one object\n    bpy.ops.object.select_all(action='DESELECT')\n    obj.select_set(True)\n    stem_obj.select_set(True)\n    bpy.context.view_layer.objects.active = obj\n    bpy.ops.object.join()\n\n    # Cleanup\n    bmesh.update_edit_mesh(mesh)\n    bm.free()\n\ncreate_musical_note()\n```"}]}