{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA diamond shape with opposite angles acute."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom math import radians\n\ndef create_diamond():\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Diamond\")\n    obj = bpy.data.objects.new(\"Diamond\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a bmesh to define the diamond shape\n    bm = bmesh.new()\n\n    # Create vertices for a diamond shape\n    v1 = bm.verts.new((0, 0, 1))  # Top vertex\n    v2 = bm.verts.new((1, 0, 0))  # Right vertex\n    v3 = bm.verts.new((0, 0, -1)) # Bottom vertex\n    v4 = bm.verts.new((-1, 0, 0)) # Left vertex\n    \n    # Create faces connecting the vertices\n    bm.faces.new((v1, v2, v3))\n    bm.faces.new((v1, v3, v4))\n    bm.faces.new((v4, v3, v2))\n    bm.faces.new((v2, v1, v4))\n    \n    # Finish up and write the bmesh to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\ncreate_diamond()\n```"}]}