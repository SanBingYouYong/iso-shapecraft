{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA simple crown shape with pointed peaks."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom math import radians\n\ndef create_crown_shape():\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"CrownMesh\")\n    obj = bpy.data.objects.new(\"Crown\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to define the geometry\n    bm = bmesh.new()\n\n    # Define the base of the crown\n    base_radius = 1.0\n    height = 0.5\n    num_peaks = 5\n    peak_height = 0.5\n\n    # Create the base vertices\n    base_verts = []\n    for i in range(num_peaks):\n        angle = radians(i * (360 / num_peaks))\n        x = base_radius * bpy.mathutils.cos(angle)\n        y = base_radius * bpy.mathutils.sin(angle)\n        base_verts.append(bmesh.verts.new((x, y, 0)))\n\n    # Create peak vertices\n    peak_verts = []\n    for i in range(num_peaks):\n        angle = radians(i * (360 / num_peaks))\n        x = (base_radius + peak_height) * bpy.mathutils.cos(angle)\n        y = (base_radius + peak_height) * bpy.mathutils.sin(angle)\n        peak_verts.append(bmesh.verts.new((x, y, height)))\n\n    # Create faces for the sides\n    for i in range(num_peaks):\n        v1 = base_verts[i]\n        v2 = base_verts[(i + 1) % num_peaks]\n        v3 = peak_verts[(i + 1) % num_peaks]\n        v4 = peak_verts[i]\n        bm.faces.new((v1, v2, v3, v4))\n\n    # Create the base face\n    bm.faces.new(base_verts)\n\n    # Finish up the bmesh and write to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\ncreate_crown_shape()\n```"}]}