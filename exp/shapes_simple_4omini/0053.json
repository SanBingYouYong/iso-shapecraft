{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA hexagonal tile shape used in honeycombs."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nimport math\n\ndef create_hexagonal_tile(radius=1):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"HexagonalTile\")\n    obj = bpy.data.objects.new(mesh.name, mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a BMesh\n    bm = bmesh.new()\n\n    # Define the vertices for the hexagon\n    for i in range(6):\n        angle = math.radians(60 * i)\n        x = radius * math.cos(angle)\n        y = radius * math.sin(angle)\n        z = 0\n        bmesh.ops.create_vert(bm, co=(x, y, z))\n\n    # Create the faces for the hexagon\n    verts = [v for v in bm.verts]\n    bmesh.ops.create_face(bm, verts=verts)\n\n    # Write the bmesh data to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Call the function to create the hexagonal tile\ncreate_hexagonal_tile()\n```"}]}