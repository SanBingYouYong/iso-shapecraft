{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA simple cross with four equal arms."}, {"role": "assistant", "content": "```python\nimport bpy\n\ndef create_cross(size=1, location=(0, 0, 0)):\n    # Create the horizontal arm of the cross\n    bpy.ops.mesh.primitive_cube_add(size=size, location=(location[0], location[1] + size/2, location[2]))\n    horizontal_arm = bpy.context.object\n    horizontal_arm.scale[1] = 0.1  # Make it thin\n    \n    # Create the vertical arm of the cross\n    bpy.ops.mesh.primitive_cube_add(size=size, location=(location[0] + size/2, location[1], location[2]))\n    vertical_arm = bpy.context.object\n    vertical_arm.scale[0] = 0.1  # Make it thin\n\ncreate_cross(size=2, location=(0, 0, 0))\n```"}]}