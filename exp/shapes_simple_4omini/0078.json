{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA curved line forming a gentle arc."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_curved_arc(radius, angle, segments):\n    # Create a new curve object\n    curve_data = bpy.data.curves.new(name='CurvedArc', type='CURVE')\n    curve_data.dimensions = '3D'\n    \n    # Create a polyline for the curve\n    polyline = curve_data.splines.new('BEZIER')\n    polyline.bezier_points.add(segments - 1)\n    \n    # Calculate points for the arc\n    for i in range(segments):\n        theta = angle * (i / (segments - 1))  # Angle for each segment\n        x = radius * math.cos(theta)  # X position\n        y = radius * math.sin(theta)  # Y position\n        polyline.bezier_points[i].co = (x, y, 0)  # Set point coordinates\n\n    # Create an object with the curve data\n    curve_object = bpy.data.objects.new('CurvedArcObject', curve_data)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(curve_object)\n\n# Parameters for the arc\ncreate_curved_arc(radius=5, angle=math.radians(90), segments=10)\n```"}]}