{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nAn arrow with a pointed tip and a straight shaft."}, {"role": "assistant", "content": "```python\nimport bpy\n\ndef create_arrow():\n    # Create the shaft of the arrow\n    bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=2, location=(0, 0, 0))\n    shaft = bpy.context.object\n    shaft.name = 'Arrow_Shaft'\n    \n    # Create the tip of the arrow\n    bpy.ops.mesh.primitive_cone_add(radius1=0.3, depth=0.5, location=(0, 0, 1))\n    tip = bpy.context.object\n    tip.name = 'Arrow_Tip'\n    \n    # Combine the shaft and tip into one object\n    bpy.ops.object.select_all(action='DESELECT')\n    shaft.select_set(True)\n    tip.select_set(True)\n    bpy.context.view_layer.objects.active = shaft\n    bpy.ops.object.join()\n    \n    # Rename the final arrow object\n    arrow = bpy.context.object\n    arrow.name = 'Arrow'\n\ncreate_arrow()\n```"}]}