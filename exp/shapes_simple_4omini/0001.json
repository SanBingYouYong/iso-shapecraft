{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA circle with a smooth, round edge."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_circle(radius=1, location=(0, 0, 0), segments=32):\n    # Create a new mesh and a new object\n    mesh = bpy.data.meshes.new(\"Circle\")\n    obj = bpy.data.objects.new(\"Circle\", mesh)\n    \n    # Link the object to the current collection\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a bmesh to hold the geometry\n    bm = bmesh.new()\n    \n    # Create a circle in bmesh\n    bmesh.ops.create_circle(bm, cap_tris=True, radius=radius, segments=segments)\n\n    # Write the bmesh data to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n    \n    # Set the location of the object\n    obj.location = location\n\ncreate_circle()\n```"}]}