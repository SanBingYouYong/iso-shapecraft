{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA flag shape with three long, horizontal stripes."}, {"role": "assistant", "content": "```python\nimport bpy\n\ndef create_flag_with_stripes():\n    # Remove existing objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    # Create a plane for the flag\n    bpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, 0))\n    flag = bpy.context.active_object\n    flag.name = \"Flag\"\n\n    # Create three stripes\n    stripe_height = 0.2\n    colors = [(1, 0, 0), (1, 1, 1), (0, 0, 1)]  # Red, White, Blue\n\n    for i in range(3):\n        # Create a new material for each stripe\n        mat = bpy.data.materials.new(name=f\"Stripe_{i+1}\")\n        mat.diffuse_color = (*colors[i], 1)  # RGBA\n        flag.data.materials.append(mat)\n\n        # Create a stripe\n        bpy.ops.mesh.primitive_plane_add(size=2, enter_editmode=False, align='WORLD', location=(0, 0, (i - 1) * stripe_height))\n        stripe = bpy.context.active_object\n        stripe.name = f\"Stripe_{i + 1}\"\n        stripe.data.materials.append(mat)\n\n        # Scale the stripe to make it long\n        stripe.scale[1] = 1.5\n\n    # Combine all stripes into one object\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.context.view_layer.objects.active = flag\n    bpy.ops.object.join()\n\ncreate_flag_with_stripes()\n```"}]}