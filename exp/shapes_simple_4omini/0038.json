{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA spiraling shape like a logarithmic spiral."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_logarithmic_spiral(turns=5, points_per_turn=100, radius_factor=0.1, height_increment=0.1):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"LogarithmicSpiral\")\n    obj = bpy.data.objects.new(\"LogarithmicSpiral\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Define vertices and faces\n    vertices = []\n    edges = []\n    \n    for i in range(turns * points_per_turn):\n        angle = i * (math.pi * 2 / points_per_turn)  # angle for each point\n        radius = radius_factor * math.exp(0.2 * angle)  # logarithmic radius\n        height = height_increment * i / points_per_turn  # incremental height\n        x = radius * math.cos(angle)\n        y = radius * math.sin(angle)\n        z = height\n        \n        vertices.append((x, y, z))\n        \n        if i > 0:\n            edges.append((i - 1, i))  # create edges between consecutive points\n\n    # Create mesh from vertices and edges\n    mesh.from_pydata(vertices, edges, [])\n    mesh.update()\n\ncreate_logarithmic_spiral()\n```"}]}