{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA trapezoid with small top and larger bottom edges."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_trapezoid(top_length, bottom_length, height):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Trapezoid\")\n    obj = bpy.data.objects.new(\"Trapezoid\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to construct the trapezoid\n    bm = bmesh.new()\n\n    # Define the vertices of the trapezoid\n    top_half = top_length / 2\n    bottom_half = bottom_length / 2\n    \n    v1 = bm.verts.new((-top_half, 0, 0))\n    v2 = bm.verts.new((top_half, 0, 0))\n    v3 = bm.verts.new((-bottom_half, height, 0))\n    v4 = bm.verts.new((bottom_half, height, 0))\n    \n    # Create faces\n    bm.faces.new((v1, v2, v4, v3))\n\n    # Finish up, write the bmesh into the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Parameters for the trapezoid\ntop_length = 2.0\nbottom_length = 4.0\nheight = 2.0\n\ncreate_trapezoid(top_length, bottom_length, height)\n```"}]}