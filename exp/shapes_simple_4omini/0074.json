{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA footprint shape with an oval base and curved top."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nimport math\n\ndef create_oval_footprint(radius_x, radius_y, height):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new('OvalFootprintMesh')\n    obj = bpy.data.objects.new('OvalFootprint', mesh)\n    \n    # Link the object to the current collection\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a bmesh to build the geometry\n    bm = bmesh.new()\n    \n    # Create the base of the footprint (oval shape)\n    bmesh.ops.create_circle(bm, cap_tris=True, radius=radius_x, segments=32)\n    \n    # Extrude and scale to create the curved top\n    top_verts = [v for v in bm.verts]\n    bmesh.ops.extrude_vert_indiv(bm, verts=top_verts)\n    \n    for v in top_verts:\n        v.co.z += height  # Move the new top vertices up\n        v.co.x *= (radius_y / radius_x)  # Adjust x to maintain the oval shape\n    \n    # Update the mesh with the new geometry\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Parameters for the oval footprint\ncreate_oval_footprint(radius_x=1, radius_y=0.5, height=1)\n```"}]}