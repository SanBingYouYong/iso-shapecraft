{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA diamond shape with four equal sides and acute angles."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom math import radians\n\ndef create_diamond(size):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Diamond\")\n    obj = bpy.data.objects.new(\"Diamond\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to build the diamond shape\n    bm = bmesh.new()\n\n    # Define the vertices of the diamond\n    verts = [\n        bm.verts.new((0, 0, size)),   # Top vertex\n        bm.verts.new((size, 0, 0)),   # Right vertex\n        bm.verts.new((0, -size, 0)),  # Bottom vertex\n        bm.verts.new((-size, 0, 0)),  # Left vertex\n    ]\n\n    # Create the faces of the diamond\n    bmesh.ops.edge_face(bm, edges=bm.edges[:], verts=verts)\n\n    # Finish up and write the bmesh to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n    # Move the object to the center\n    obj.location = (0, 0, 0)\n\n# Create the diamond shape with a specified size\ncreate_diamond(1)\n```"}]}