{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA scalene triangle with no equal sides."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_scalene_triangle(vertices):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"ScaleneTriangle\")\n    obj = bpy.data.objects.new(\"ScaleneTriangle\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to define the geometry\n    bm = bmesh.new()\n    \n    # Create the vertices of the scalene triangle\n    v1 = bm.verts.new(vertices[0])\n    v2 = bm.verts.new(vertices[1])\n    v3 = bm.verts.new(vertices[2])\n    \n    # Create the face using the vertices\n    bm.faces.new((v1, v2, v3))\n    \n    # Finish up, write the bmesh to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Define vertices for a scalene triangle (no equal sides)\nvertices = [(0, 0, 0), (2, 0, 0), (1, 1, 0)]\ncreate_scalene_triangle(vertices)\n```"}]}