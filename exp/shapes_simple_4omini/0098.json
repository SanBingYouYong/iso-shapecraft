{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA rounded star with five evenly spaced arms."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nimport math\n\ndef create_rounded_star(radius_outer, radius_inner, thickness, num_points):\n    bpy.ops.object.select_all(action='DESELECT')\n    \n    # Create a new mesh\n    mesh = bpy.data.meshes.new(\"RoundedStar\")\n    obj = bpy.data.objects.new(\"RoundedStar\", mesh)\n    bpy.context.collection.objects.link(obj)\n    \n    bm = bmesh.new()\n    \n    # Create the star shape\n    angle_step = math.pi / num_points\n    for i in range(num_points * 2):\n        angle = i * angle_step\n        r = radius_outer if i % 2 == 0 else radius_inner\n        x = r * math.cos(angle)\n        y = r * math.sin(angle)\n        bmesh.ops.create_circle(bm, cap_tris=True, radius=r, location=(x, y, 0), segments=8)\n\n    # Create faces\n    verts = [v for v in bm.verts]\n    for i in range(len(verts)):\n        v1 = verts[i]\n        v2 = verts[(i + 1) % len(verts)]\n        v3 = verts[(i + 1 + num_points) % len(verts)]\n        v4 = verts[(i + num_points) % len(verts)]\n        bmesh.ops.face_create(bm, verts=[v1, v2, v3, v4])\n\n    # Extrude to give thickness\n    for v in bm.verts:\n        v.co.z += thickness\n    \n    # Finalize the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Parameters for the rounded star\nradius_outer = 1.0\nradius_inner = 0.5\nthickness = 0.2\nnum_points = 5\n\ncreate_rounded_star(radius_outer, radius_inner, thickness, num_points)\n```"}]}