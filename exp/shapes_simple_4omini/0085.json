{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA flame shape with a pointed tip and curved body."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom math import radians\n\ndef create_flame_shape():\n    # Create a new mesh and a new object\n    mesh = bpy.data.meshes.new(\"FlameMesh\")\n    obj = bpy.data.objects.new(\"Flame\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to build the flame geometry\n    bm = bmesh.new()\n\n    # Define flame parameters\n    flame_height = 2.0\n    flame_width = 0.5\n    flame_tip = flame_height * 0.8\n\n    # Create the base of the flame\n    base_verts = [\n        (-flame_width, 0, 0),\n        (flame_width, 0, 0),\n        (0, 0, flame_height)\n    ]\n    \n    # Create the curve of the flame body\n    curve_verts = [\n        (-flame_width * 0.5, 0, flame_tip),\n        (0, 0, flame_height * 0.6),\n        (flame_width * 0.5, 0, flame_tip)\n    ]\n\n    # Add base vertices\n    for v in base_verts:\n        bm.verts.new(v)\n\n    # Add curve vertices\n    for v in curve_verts:\n        bm.verts.new(v)\n\n    # Create faces for the flame shape\n    bm.verts.ensure_lookup_table()\n    bmesh.ops.context_create(bm)\n    bmesh.ops.context_add_face(bm, [bm.verts[0], bm.verts[1], bm.verts[2]])\n    bmesh.ops.context_add_face(bm, [bm.verts[0], bm.verts[2], bm.verts[3]])\n    bmesh.ops.context_add_face(bm, [bm.verts[1], bm.verts[2], bm.verts[4]])\n    bmesh.ops.context_add_face(bm, [bm.verts[3], bm.verts[4], bm.verts[2]])\n\n    # Update the mesh with the bmesh data\n    bm.to_mesh(mesh)\n    bm.free()\n\ncreate_flame_shape()\n```"}]}