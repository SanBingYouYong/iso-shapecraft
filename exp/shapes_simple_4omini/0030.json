{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nAn ellipse with two axes of unequal length."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom math import radians\n\ndef create_ellipse(axis_a, axis_b, location=(0, 0, 0), rotation=(0, 0, 0)):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Ellipse\")\n    obj = bpy.data.objects.new(\"Ellipse\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a bmesh to define the ellipse\n    bm = bmesh.new()\n    \n    # Create the ellipse vertices\n    segments = 64  # Number of segments for the ellipse\n    for i in range(segments):\n        angle = radians(360 / segments * i)\n        x = axis_a * bpy.mathutils.cos(angle)\n        y = axis_b * bpy.mathutils.sin(angle)\n        bmesh.ops.create_circle(bm, cap_tris=True, radius=1, location=(x, y, 0), segments=1)\n        \n    # Create the mesh from the bmesh\n    bm.to_mesh(mesh)\n    bm.free()\n    \n    # Set the location and rotation of the object\n    obj.location = location\n    obj.rotation_euler = rotation\n\n# Parameters for the ellipse\naxis_a = 2.0  # Length of the semi-major axis\naxis_b = 1.0  # Length of the semi-minor axis\ncreate_ellipse(axis_a, axis_b)\n```"}]}