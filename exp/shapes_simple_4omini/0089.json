{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA simple arch shape with a curved top."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom math import radians\n\ndef create_arch(radius=1, height=1, segments=16):\n    # Create a new mesh and a new object\n    mesh = bpy.data.meshes.new(\"Arch\")\n    obj = bpy.data.objects.new(\"Arch\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to build the arch\n    bm = bmesh.new()\n\n    for i in range(segments + 1):\n        angle = radians(180 * (i / segments))\n        x = radius * (1 - (angle / (radians(180))))  # X position\n        y = radius * -1 * (1 - (angle / (radians(180))))  # Y position\n        z = height * (1 - (i / segments))  # Z position\n        bmesh.ops.create_circle(bm, cap_tris=True, radius=radius, segments=segments, location=(x, y, z))\n\n    # Create the mesh from the bmesh\n    bm.to_mesh(mesh)\n    bm.free()\n\ncreate_arch()\n```"}]}