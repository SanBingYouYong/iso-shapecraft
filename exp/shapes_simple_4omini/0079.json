{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA wedge shape with two straight sides converging at a point."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_wedge_shape(location=(0, 0, 0), size=2):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new('Wedge')\n    obj = bpy.data.objects.new('Wedge', mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a bmesh to define the wedge geometry\n    bm = bmesh.new()\n    \n    # Define the vertices of the wedge\n    v1 = bm.verts.new((0, 0, 0))\n    v2 = bm.verts.new((size, 0, 0))\n    v3 = bm.verts.new((size / 2, size, 0))\n    v4 = bm.verts.new((0, 0, size))\n    \n    # Create faces for the wedge\n    bm.faces.new((v1, v2, v3))\n    bm.faces.new((v1, v2, v4))\n    bm.faces.new((v2, v3, v4))\n    bm.faces.new((v1, v3, v4))\n    \n    # Update the mesh with the new geometry\n    bm.to_mesh(mesh)\n    bm.free()\n    \n    # Move the object to the specified location\n    obj.location = location\n\ncreate_wedge_shape()\n```"}]}