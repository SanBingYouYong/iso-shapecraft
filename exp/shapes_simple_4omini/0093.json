{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA spiral shape with tight loops at the center."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_spiral(radius, height, turns, segments):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"SpiralMesh\")\n    obj = bpy.data.objects.new(\"Spiral\", mesh)\n\n    # Link object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create vertices and faces\n    vertices = []\n    edges = []\n    faces = []\n\n    for t in range(turns * segments + 1):\n        angle = t * (2 * math.pi / segments)  # Angle for each segment\n        r = radius * (1 - t / (turns * segments))  # Decrease radius for tight loops\n        z = height * (t / (turns * segments))  # Linear height increase\n\n        x = r * math.cos(angle)\n        y = r * math.sin(angle)\n\n        vertices.append((x, y, z))\n\n        if t > 0:\n            edges.append((t - 1, t))\n\n    # Create mesh from vertices and edges\n    mesh.from_pydata(vertices, edges, faces)\n    mesh.update()\n\n# Parameters for the spiral\ncreate_spiral(radius=1, height=5, turns=5, segments=100)\n```"}]}