{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA symmetrical shape resembling a butterfly's wings."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_butterfly_wings():\n    # Clear existing mesh objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    # Create the left wing\n    bpy.ops.mesh.primitive_bezier_curve_add(location=(-1, 0, 0))\n    left_wing = bpy.context.object\n    left_wing.data.bevel_depth = 0.1\n    left_wing.data.bevel_resolution = 5\n\n    # Adjust control points for the left wing\n    left_wing.data.splines[0].bezier_points[0].co = (-1, 0, 0)\n    left_wing.data.splines[0].bezier_points[0].handle_right = (-0.5, 0.5, 0)\n    left_wing.data.splines[0].bezier_points[0].handle_left = (-0.5, -0.5, 0)\n    \n    left_wing.data.splines[0].bezier_points[1].co = (0, 1, 0)\n    left_wing.data.splines[0].bezier_points[1].handle_right = (0.5, 1, 0)\n    left_wing.data.splines[0].bezier_points[1].handle_left = (0.5, 1, 0)\n\n    left_wing.data.splines[0].bezier_points[2].co = (1, 0, 0)\n    left_wing.data.splines[0].bezier_points[2].handle_right = (1, -0.5, 0)\n    left_wing.data.splines[0].bezier_points[2].handle_left = (1, 0.5, 0)\n\n    # Create the right wing by mirroring the left wing\n    bpy.ops.object.duplicate()\n    right_wing = bpy.context.object\n    right_wing.location.x *= -1\n\n    # Join wings into a single object\n    bpy.ops.object.select_all(action='DESELECT')\n    left_wing.select_set(True)\n    right_wing.select_set(True)\n    bpy.context.view_layer.objects.active = left_wing\n    bpy.ops.object.join()\n\n    # Add a solidify modifier for thickness\n    bpy.ops.object.modifier_add(type='SOLIDIFY')\n    bpy.context.object.modifiers[\"Solidify\"].thickness = 0.1\n\ncreate_butterfly_wings()\n```"}]}