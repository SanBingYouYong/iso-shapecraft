{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA fan shape with radiating lines."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_fan_shape(radius, num_lines):\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))\n    empty = bpy.context.active_object\n\n    for i in range(num_lines):\n        angle = i * (2 * math.pi / num_lines)\n        x = radius * math.cos(angle)\n        y = radius * math.sin(angle)\n        \n        bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=radius, location=(x/2, y/2, 0))\n        obj = bpy.context.active_object\n        obj.rotation_euler[2] = angle\n\n    bpy.context.view_layer.objects.active = empty\n    bpy.ops.object.select_all(action='DESELECT')\n    empty.select_set(True)\n    bpy.context.view_layer.objects.active = empty\n\ncreate_fan_shape(radius=5, num_lines=12)\n```"}]}