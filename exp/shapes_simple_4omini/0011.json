{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA star with five points."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom math import radians\n\ndef create_star(size=1, depth=0.1):\n    # Create a new mesh and a new object\n    mesh = bpy.data.meshes.new(\"Star\")\n    obj = bpy.data.objects.new(\"Star\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to build the star shape\n    bm = bmesh.new()\n\n    # Define the star points\n    points = [\n        (0, size, 0),\n        (size * 0.2245, size * 0.309, 0),\n        (size, size * 0.309, 0),\n        (size * 0.3632, size * 0.118, 0),\n        (size * 0.4472, -size * 0.309, 0),\n        (0, -size * 0.118, 0),\n        (-size * 0.4472, -size * 0.309, 0),\n        (-size * 0.3632, size * 0.118, 0),\n        (-size, size * 0.309, 0),\n        (-size * 0.2245, size * 0.309, 0)\n    ]\n\n    # Create vertices\n    verts = [bm.verts.new(point) for point in points]\n\n    # Create faces for the star\n    faces = [\n        (verts[0], verts[1], verts[2], verts[3], verts[4]),\n        (verts[0], verts[4], verts[5], verts[6], verts[7]),\n        (verts[0], verts[7], verts[8], verts[9], verts[1]),\n    ]\n    \n    for face in faces:\n        bm.faces.new(face)\n\n    # Finish up, write the bmesh to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n    # Set the object to be selectable and active\n    bpy.context.view_layer.objects.active = obj\n    obj.select_set(True)\n\n# Call the function to create the star\ncreate_star(size=1, depth=0.1)\n```"}]}