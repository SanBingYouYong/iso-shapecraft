{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA U-shaped curve with open ends."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_u_shaped_curve(radius=1, height=1, segments=32):\n    # Create a new curve\n    curve_data = bpy.data.curves.new('UShapeCurve', type='CURVE')\n    curve_data.dimensions = '3D'\n    \n    # Create a new spline\n    spline = curve_data.splines.new('BEZIER')\n    spline.bezier_points.add(segments - 1)\n\n    # Set the points for the U shape\n    for i in range(segments):\n        angle = math.pi * (i / (segments - 1))  # U shape from 0 to \u03c0\n        x = radius * math.sin(angle)\n        y = radius * (1 - math.cos(angle))  # Offset to create the U shape\n        spline.bezier_points[i].co = (x, y, 0)\n        spline.bezier_points[i].handle_left_type = 'AUTO'\n        spline.bezier_points[i].handle_right_type = 'AUTO'\n    \n    # Create an object with the curve\n    curve_object = bpy.data.objects.new('UShapeCurveObject', curve_data)\n    \n    # Link the object to the current scene\n    bpy.context.collection.objects.link(curve_object)\n\ncreate_u_shaped_curve()\n```"}]}