{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA pyramid with a square base and four triangular faces."}, {"role": "assistant", "content": "```python\nimport bpy\n\ndef create_pyramid():\n    # Clear existing mesh objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    # Define the vertices and faces for the pyramid\n    vertices = [\n        (1, 1, 0),   # Base vertex 1\n        (1, -1, 0),  # Base vertex 2\n        (-1, -1, 0), # Base vertex 3\n        (-1, 1, 0),  # Base vertex 4\n        (0, 0, 1)    # Apex vertex\n    ]\n    \n    faces = [\n        (0, 1, 4),  # Triangle face 1\n        (1, 2, 4),  # Triangle face 2\n        (2, 3, 4),  # Triangle face 3\n        (3, 0, 4),  # Triangle face 4\n        (0, 1, 2, 3) # Square base\n    ]\n    \n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Pyramid\")\n    obj = bpy.data.objects.new(\"Pyramid\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create the mesh from the vertices and faces\n    mesh.from_pydata(vertices, [], faces)\n    mesh.update()\n\ncreate_pyramid()\n```"}]}