{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA parallelogram with opposite sides equal and parallel."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_parallelogram(length, width, height):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Parallelogram\")\n    obj = bpy.data.objects.new(\"Parallelogram\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a bmesh to define the geometry\n    bm = bmesh.new()\n\n    # Define the vertices of the parallelogram\n    v1 = bm.verts.new((0, 0, 0))\n    v2 = bm.verts.new((length, 0, 0))\n    v3 = bm.verts.new((length - width, height, 0))\n    v4 = bm.verts.new((-width, height, 0))\n    \n    # Create faces\n    bm.faces.new((v1, v2, v3, v4))\n\n    # Update the mesh with the bmesh data\n    bm.to_mesh(mesh)\n    bm.free()\n\n    # Set the location of the object\n    obj.location = (0, 0, 0)\n\n# Create a parallelogram with specified dimensions\ncreate_parallelogram(length=2, width=1, height=1)\n```"}]}