{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA sideways hourglass shape."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_sideways_hourglass():\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Hourglass\")\n    obj = bpy.data.objects.new(\"Hourglass\", mesh)\n    \n    # Link the object to the current scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a bmesh to construct the geometry\n    bm = bmesh.new()\n\n    # Define the vertices for the sideways hourglass\n    verts = [\n        bm.verts.new((0, 1, 0)),  # Top vertex\n        bm.verts.new((1, 0, 0)),  # Middle right vertex\n        bm.verts.new((0, -1, 0)), # Bottom vertex\n        bm.verts.new((-1, 0, 0)), # Middle left vertex\n    ]\n\n    # Create faces for the hourglass shape\n    bm.faces.new((verts[0], verts[1], verts[2]))\n    bm.faces.new((verts[0], verts[2], verts[3]))\n    bm.faces.new((verts[1], verts[0], verts[3]))\n    bm.faces.new((verts[1], verts[3], verts[2]))\n\n    # Finish the bmesh and write to mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n    # Set the object's location\n    obj.location = (0, 0, 0)\n\ncreate_sideways_hourglass()\n```"}]}