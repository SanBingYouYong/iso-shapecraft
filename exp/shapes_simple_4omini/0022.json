{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA parallelepiped with six rectangular faces."}, {"role": "assistant", "content": "```python\nimport bpy\n\ndef create_parallelepiped(width, height, depth):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Parallelepiped\")\n    obj = bpy.data.objects.new(\"Parallelepiped\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Define the vertices and faces of the parallelepiped\n    vertices = [\n        (0, 0, 0), (width, 0, 0), (width, depth, 0), (0, depth, 0),  # Bottom face\n        (0, 0, height), (width, 0, height), (width, depth, height), (0, depth, height)  # Top face\n    ]\n    \n    faces = [\n        (0, 1, 2, 3),  # Bottom face\n        (4, 5, 6, 7),  # Top face\n        (0, 1, 5, 4),  # Front face\n        (2, 3, 7, 6),  # Back face\n        (0, 3, 7, 4),  # Left face\n        (1, 2, 6, 5)   # Right face\n    ]\n\n    # Create the mesh from the vertices and faces\n    mesh.from_pydata(vertices, [], faces)\n    mesh.update()\n\n# Parameters for the parallelepiped\ncreate_parallelepiped(2, 3, 1)\n```"}]}