{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA square with four equal sides."}, {"role": "assistant", "content": "```python\nimport bpy\n\ndef create_square(size):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"SquareMesh\")\n    obj = bpy.data.objects.new(\"Square\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create the square vertices and faces\n    vertices = [\n        (size / 2, size / 2, 0),  # Top Right\n        (size / 2, -size / 2, 0), # Bottom Right\n        (-size / 2, -size / 2, 0),# Bottom Left\n        (-size / 2, size / 2, 0)  # Top Left\n    ]\n    \n    faces = [(0, 1, 2, 3)]  # One face made of all four vertices\n\n    # Create the mesh from the vertices and faces\n    mesh.from_pydata(vertices, [], faces)\n    mesh.update()\n\ncreate_square(2)\n```"}]}