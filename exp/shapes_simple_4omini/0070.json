{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA trapezoidal shape with a wider top than bottom."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_trapezoid(top_width, bottom_width, height):\n    # Clear existing mesh objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n    \n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Trapezoid\")\n    obj = bpy.data.objects.new(\"Trapezoid\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a BMesh\n    bm = bmesh.new()\n    \n    # Define the vertices for the trapezoid\n    v1 = bm.verts.new((top_width / 2, 0, height))\n    v2 = bm.verts.new((-top_width / 2, 0, height))\n    v3 = bm.verts.new((bottom_width / 2, 0, 0))\n    v4 = bm.verts.new((-bottom_width / 2, 0, 0))\n    \n    # Create the faces of the trapezoid\n    bm.faces.new((v1, v2, v4, v3))  # Top face\n    bm.faces.new((v1, v2, v2))      # Side faces\n    bm.faces.new((v3, v4, v1, v2))  # Bottom face\n    \n    # Write the bmesh to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Create a trapezoid with specified dimensions\ncreate_trapezoid(top_width=2, bottom_width=1, height=1)\n```"}]}