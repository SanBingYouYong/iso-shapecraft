{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA zigzag line with sharp angles."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_zigzag_line(length=5, segments=10, height=1):\n    # Clear existing mesh objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(name=\"ZigzagLine\")\n    obj = bpy.data.objects.new(\"ZigzagLine\", mesh)\n\n    # Link the object to the current collection\n    bpy.context.collection.objects.link(obj)\n\n    # Define vertices and edges for the zigzag line\n    vertices = []\n    edges = []\n\n    for i in range(segments + 1):\n        x = (length / segments) * i\n        y = height * (-1) ** i  # Alternate between -height and height\n        vertices.append((x, y, 0))\n        if i > 0:\n            edges.append((i - 1, i))\n\n    # Create the mesh from the vertices and edges\n    mesh.from_pydata(vertices, edges, [])\n    mesh.update()\n\ncreate_zigzag_line()\n```"}]}