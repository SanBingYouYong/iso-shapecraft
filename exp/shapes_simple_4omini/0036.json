{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA segment of a circle, a region bounded by a chord and the arc it intercepts."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_circle_segment(radius, angle, location):\n    # Create a new mesh\n    mesh = bpy.data.meshes.new(\"CircleSegment\")\n    obj = bpy.data.objects.new(\"CircleSegment\", mesh)\n    \n    # Link the object to the current collection\n    bpy.context.collection.objects.link(obj)\n    \n    # Create the vertices for the circle segment\n    vertices = []\n    num_segments = 32\n    angle_step = angle / num_segments\n    \n    # Create the points for the segment\n    for i in range(num_segments + 1):\n        theta = angle_step * i\n        x = radius * math.cos(theta)\n        y = radius * math.sin(theta)\n        vertices.append((x, y, 0))\n    \n    # Add the chord endpoints\n    vertices.append((radius * math.cos(0), radius * math.sin(0), 0))  # Start point\n    vertices.append((radius * math.cos(angle), radius * math.sin(angle), 0))  # End point\n\n    # Create the faces for the segment\n    faces = []\n    for i in range(num_segments):\n        faces.append((i, (i + 1) % (num_segments + 1), num_segments, num_segments + 1))  # Chord and arc\n    \n    # Create the mesh\n    mesh.from_pydata(vertices, [], faces)\n    mesh.update()\n\n    # Move the object to the specified location\n    obj.location = location\n\n# Example usage\ncreate_circle_segment(radius=1, angle=math.radians(90), location=(0, 0, 0))\n```"}]}