{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA knot shape with a loop crossing over itself."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom math import radians\nimport mathutils\n\ndef create_knot(radius=1, loops=3, segments=32):\n    # Create a new mesh\n    mesh = bpy.data.meshes.new(\"Knot\")\n    obj = bpy.data.objects.new(\"Knot\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    bpy.context.view_layer.objects.active = obj\n    bpy.ops.object.select_all(action='DESELECT')\n    obj.select_set(True)\n    \n    # Create a BMesh for the knot\n    bm = bmesh.new()\n\n    for i in range(loops * segments):\n        theta = i * (2 * math.pi / segments)\n        phi = (i * (math.pi / 2)) / segments\n\n        x = radius * (1 + math.cos(phi)) * math.cos(theta)\n        y = radius * (1 + math.cos(phi)) * math.sin(theta)\n        z = radius * math.sin(phi)\n\n        bmesh.ops.create_circle(bm, cap_tris=True, radius=0.1, location=(x, y, z), segments=8)\n\n    # Finish up\n    bm.to_mesh(mesh)\n    bm.free()\n    \n    # Set smooth shading\n    for face in mesh.polygons:\n        face.use_smooth = True\n\ncreate_knot()\n```"}]}