{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA parallelogram with one pair of obtuse angles."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_parallelogram(length, width, height):\n    # Define vertices for a parallelogram\n    vertices = [\n        (0, 0, 0),  # Vertex 0\n        (length, 0, 0),  # Vertex 1\n        (length - width * math.cos(math.radians(30)), width * math.sin(math.radians(30)), 0),  # Vertex 2\n        (-width * math.cos(math.radians(30)), width * math.sin(math.radians(30)), 0),  # Vertex 3\n        (0, 0, height),  # Vertex 4\n        (length, 0, height),  # Vertex 5\n        (length - width * math.cos(math.radians(30)), width * math.sin(math.radians(30)), height),  # Vertex 6\n        (-width * math.cos(math.radians(30)), width * math.sin(math.radians(30)), height)  # Vertex 7\n    ]\n\n    # Define edges (not needed for a mesh but included for clarity)\n    edges = []\n\n    # Define faces\n    faces = [\n        (0, 1, 2, 3),  # Bottom face\n        (4, 5, 6, 7),  # Top face\n        (0, 1, 5, 4),  # Side face 1\n        (1, 2, 6, 5),  # Side face 2\n        (2, 3, 7, 6),  # Side face 3\n        (3, 0, 4, 7)   # Side face 4\n    ]\n\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Parallelogram\")\n    obj = bpy.data.objects.new(\"Parallelogram\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create the mesh from the vertices, edges, and faces\n    mesh.from_pydata(vertices, edges, faces)\n    mesh.update()\n\n# Create a parallelogram with specified dimensions\ncreate_parallelogram(length=2, width=1, height=1)\n```"}]}