{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA squiggly line with irregular turns."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nimport math\nimport random\n\ndef create_squiggly_line(num_points=10, amplitude=0.5, frequency=1.0):\n    # Create a new mesh and a new object\n    mesh = bpy.data.meshes.new(\"SquigglyLine\")\n    obj = bpy.data.objects.new(\"SquigglyLineObject\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh object to build the geometry\n    bm = bmesh.new()\n    \n    # Generate random points for the squiggly line\n    for i in range(num_points):\n        x = i * 0.5  # Spacing between points\n        y = amplitude * math.sin(frequency * x + random.uniform(-math.pi/4, math.pi/4))  # Y position with irregularity\n        z = random.uniform(-0.2, 0.2)  # Random Z position for irregularity\n        bmesh.ops.create_vert(bm, co=(x, y, z))\n\n    # Create edges between the points\n    verts = list(bm.verts)\n    for i in range(len(verts) - 1):\n        bmesh.ops.create_edge(bm, v1=verts[i], v2=verts[i + 1])\n\n    # Finish up and write the bmesh to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\ncreate_squiggly_line()\n```"}]}