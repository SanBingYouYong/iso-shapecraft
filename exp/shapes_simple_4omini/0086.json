{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA checkmark shape formed by two intersecting lines."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_checkmark(size=1):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Checkmark\")\n    obj = bpy.data.objects.new(\"Checkmark\", mesh)\n    \n    # Link the object to the current collection\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a bmesh to define geometry\n    bm = bmesh.new()\n    \n    # Define vertices for the checkmark shape\n    v1 = bm.verts.new((0, 0, 0))     # Start point\n    v2 = bm.verts.new((0, size, 0))  # Vertical line top\n    v3 = bm.verts.new((size, size, 0))  # Horizontal line end\n    v4 = bm.verts.new((size, 0, 0))  # Horizontal line start\n    \n    # Create edges for the checkmark\n    bm.edges.new((v1, v2))  # Vertical line\n    bm.edges.new((v2, v3))  # Diagonal line\n    bm.edges.new((v3, v4))  # Bottom edge\n    bm.edges.new((v4, v1))  # Closing the shape\n    \n    # Finish the bmesh and write to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\ncreate_checkmark(size=2)\n```"}]}