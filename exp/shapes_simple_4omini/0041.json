{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA V-shaped line with an open angle."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_v_shape(angle_degrees, length):\n    # Calculate the coordinates for the V shape\n    angle_radians = math.radians(angle_degrees)\n    half_length = length / 2\n\n    # Create vertices for the V shape\n    verts = [\n        (0, 0, 0),  # Vertex 0\n        (half_length * math.cos(angle_radians / 2), half_length * math.sin(angle_radians / 2), 0),  # Vertex 1\n        (-half_length * math.cos(angle_radians / 2), half_length * math.sin(angle_radians / 2), 0)  # Vertex 2\n    ]\n    \n    # Create edges for the V shape\n    edges = [(0, 1), (0, 2)]\n\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"VShapeMesh\")\n    obj = bpy.data.objects.new(\"VShape\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create the mesh from the vertices and edges\n    mesh.from_pydata(verts, edges, [])\n    mesh.update()\n\n# Create a V-shaped line with an open angle of 60 degrees and length of 2 units\ncreate_v_shape(60, 2)\n```"}]}