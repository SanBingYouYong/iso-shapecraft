{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA rounded rectangle with smooth edges."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_rounded_rectangle(width, height, depth, radius):\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.mesh.primitive_cube_add(size=1)\n    obj = bpy.context.object\n    obj.dimensions = (width, height, depth)\n    \n    # Create a BMesh to work with the geometry\n    bm = bmesh.new()\n    bmesh.ops.create_cube(bm, size=1)\n    \n    # Add a rounded effect to the corners\n    for v in bm.verts:\n        if abs(v.co.x) >= width / 2 - radius and abs(v.co.y) >= height / 2 - radius:\n            v.co.z -= depth / 2\n        else:\n            v.co.z += depth / 2\n\n    # Create rounded corners\n    bmesh.ops.bevel(bm, geom=bm.verts, offset=radius)\n    \n    # Write the BMesh back to the mesh\n    bm.to_mesh(obj.data)\n    bm.free()\n\n# Parameters for the rounded rectangle\nwidth = 2\nheight = 1\ndepth = 0.5\nradius = 0.2\n\ncreate_rounded_rectangle(width, height, depth, radius)\n```"}]}