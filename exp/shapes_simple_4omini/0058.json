{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA rounded pentagon with five equal sides."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom math import radians, pi, sin, cos\n\ndef create_rounded_pentagon(radius=1, roundness=0.2):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"RoundedPentagon\")\n    obj = bpy.data.objects.new(\"RoundedPentagon\", mesh)\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a bmesh\n    bm = bmesh.new()\n    \n    # Calculate the angle between vertices\n    angle = 2 * pi / 5\n    \n    # Create pentagon vertices with rounded corners\n    vertices = []\n    for i in range(5):\n        x = radius * cos(i * angle)\n        y = radius * sin(i * angle)\n        vertices.append((x, y, 0))\n\n    # Add vertices to the bmesh\n    bmesh_verts = [bm.verts.new(v) for v in vertices]\n    \n    # Create faces\n    for i in range(5):\n        v1 = bmesh_verts[i]\n        v2 = bmesh_verts[(i + 1) % 5]\n        v3 = bmesh_verts[(i + 1) % 5] + bmesh.Vector((roundness * cos((i + 1) * angle), roundness * sin((i + 1) * angle), 0))\n        v4 = bmesh_verts[i] + bmesh.Vector((roundness * cos(i * angle), roundness * sin(i * angle), 0))\n        bm.faces.new((v1, v2, v3, v4))\n    \n    # Finalize the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n    \n    # Set the object's origin to geometry\n    bpy.context.view_layer.objects.active = obj\n    bpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_VOLUME', center='MEDIAN')\n\ncreate_rounded_pentagon()\n```"}]}