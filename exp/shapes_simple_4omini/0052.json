{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA leaf shape with a smooth edge and pointed tip."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom math import radians\n\ndef create_leaf_shape():\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"LeafMesh\")\n    obj = bpy.data.objects.new(\"Leaf\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a bmesh to construct the leaf shape\n    bm = bmesh.new()\n    \n    # Define the leaf shape vertices\n    verts = [\n        (0, 0, 0),    # Base of the leaf\n        (1, 0.5, 0),  # Right side of the leaf\n        (0.5, 1, 0),  # Tip of the leaf\n        (0, 0.5, 0),  # Left side of the leaf\n    ]\n    \n    # Create the vertices in bmesh\n    vert_list = [bm.verts.new(v) for v in verts]\n    \n    # Create faces for the leaf shape\n    bm.faces.new((vert_list[0], vert_list[1], vert_list[2], vert_list[3]))\n    \n    # Update the mesh with bmesh data\n    bm.to_mesh(mesh)\n    bm.free()\n    \n    # Smooth shading\n    bpy.ops.object.shade_smooth()\n    \n    # Add a material to the leaf\n    mat = bpy.data.materials.new(name=\"LeafMaterial\")\n    mat.use_nodes = True\n    bsdf = mat.node_tree.nodes.get(\"Principled BSDF\")\n    bsdf.inputs['Base Color'].default_value = (0.1, 0.8, 0.1, 1)  # Green color\n    obj.data.materials.append(mat)\n\ncreate_leaf_shape()\n```"}]}