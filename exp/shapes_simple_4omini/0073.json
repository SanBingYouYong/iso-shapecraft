{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA teardrop shape with a pointed tip."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom math import radians\n\ndef create_teardrop():\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Teardrop\")\n    obj = bpy.data.objects.new(\"Teardrop\", mesh)\n    \n    # Link the object to the current collection\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a BMesh to define the geometry\n    bm = bmesh.new()\n    \n    # Define vertices of a teardrop shape\n    verts = [\n        (0, 0, 0),  # Bottom point\n        (1, 0, 1),  # Right side\n        (0, 1, 1),  # Top point\n        (-1, 0, 1), # Left side\n    ]\n    \n    # Create the vertices\n    vlist = [bm.verts.new(v) for v in verts]\n    \n    # Define faces based on vertices\n    faces = [\n        (vlist[0], vlist[1], vlist[2]),\n        (vlist[0], vlist[2], vlist[3]),\n        (vlist[0], vlist[1], vlist[3]),\n        (vlist[1], vlist[2], vlist[3]),\n    ]\n    \n    for f in faces:\n        bm.faces.new(f)\n    \n    # Update the mesh with the new geometry\n    bm.to_mesh(mesh)\n    bm.free()\n\n    # Move the object to the center\n    obj.location = (0, 0, 0)\n\ncreate_teardrop()\n```"}]}