{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nAn equilateral triangle with all sides equal."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom math import radians\n\ndef create_equilateral_triangle():\n    # Define the vertices of an equilateral triangle\n    size = 2  # Length of each side\n    height = (size * (3**0.5)) / 2\n    vertices = [\n        (0, 0, 0),  # Vertex A\n        (size, 0, 0),  # Vertex B\n        (size / 2, height, 0)  # Vertex C\n    ]\n    \n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"EquilateralTriangle\")\n    obj = bpy.data.objects.new(\"EquilateralTriangle\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create the mesh from the vertices\n    bm = bmesh.new()\n    for v in vertices:\n        bm.verts.new(v)\n    \n    bm.verts.ensure_lookup_table()\n    bm.faces.new(bm.verts)\n    \n    # Write the bmesh data to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\ncreate_equilateral_triangle()\n```"}]}