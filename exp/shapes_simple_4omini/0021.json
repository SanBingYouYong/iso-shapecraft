{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA wedge with a triangular cross-section."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_wedge(base_length, height, depth):\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, 0))\n    obj = bpy.context.object\n    bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)\n    \n    # Create a bmesh to modify the cube into a wedge\n    bm = bmesh.new()\n    bmesh.ops.create_cube(bm)\n    \n    # Scale the cube to form a wedge\n    for v in bm.verts:\n        if v.co.x < 0:\n            v.co.x *= (base_length / 2)\n        v.co.z *= (height)\n        v.co.y *= (depth)\n    \n    bmesh.ops.delete(bm, geom=[v for v in bm.verts if v.co.x < 0])\n    \n    # Create the mesh\n    mesh = bpy.data.meshes.new(\"WedgeMesh\")\n    bm.to_mesh(mesh)\n    bm.free()\n    \n    # Create an object with the mesh\n    wedge_object = bpy.data.objects.new(\"Wedge\", mesh)\n    bpy.context.collection.objects.link(wedge_object)\n    return wedge_object\n\ncreate_wedge(base_length=2, height=1, depth=1)\n```"}]}