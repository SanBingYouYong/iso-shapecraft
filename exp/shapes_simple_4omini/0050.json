{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA spiral pattern starting from the center."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_spiral(radius, turns, height, segments):\n    bpy.ops.object.select_all(action='DESELECT')  # Deselect all objects\n    bpy.ops.object.add(type='MESH', enter_editmode=True)  # Add a new mesh object\n    mesh = bpy.context.object.data\n\n    vertices = []\n    edges = []\n    faces = []\n\n    for i in range(turns * segments):\n        angle = i * (2 * math.pi / segments)  # Calculate angle for each segment\n        x = radius * math.cos(angle) * (i / (turns * segments))  # X position\n        y = radius * math.sin(angle) * (i / (turns * segments))  # Y position\n        z = height * (i / (turns * segments))  # Z position\n        vertices.append((x, y, z))\n\n        if i > 0:\n            edges.append((i - 1, i))  # Connect edges\n\n    mesh.from_pydata(vertices, edges, faces)  # Create mesh from vertices and edges\n    bpy.ops.object.mode_set(mode='OBJECT')  # Switch back to object mode\n\ncreate_spiral(radius=1, turns=5, height=2, segments=100)\n```"}]}