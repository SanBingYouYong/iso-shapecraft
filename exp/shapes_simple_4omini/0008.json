{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA trapezoid with one pair of parallel sides."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom mathutils import Vector\n\ndef create_trapezoid(base1_length, base2_length, height):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new('Trapezoid')\n    obj = bpy.data.objects.new('Trapezoid', mesh)\n    \n    # Link the object to the collection\n    bpy.context.collection.objects.link(obj)\n    \n    # Create a bmesh to build the trapezoid geometry\n    bm = bmesh.new()\n    \n    # Define the vertices of the trapezoid\n    v1 = bm.verts.new(Vector((0, 0, 0)))                       # Bottom-left\n    v2 = bm.verts.new(Vector((base1_length, 0, 0)))          # Bottom-right\n    v3 = bm.verts.new(Vector((base2_length / 2, height, 0))) # Top-right\n    v4 = bm.verts.new(Vector((base2_length / 2 - base1_length / 2, height, 0))) # Top-left\n    \n    # Create the faces\n    bm.faces.new((v1, v2, v3, v4))\n    \n    # Finish up, write the bmesh data to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Parameters for the trapezoid: base1_length, base2_length, height\ncreate_trapezoid(2, 1, 1)\n\n```"}]}