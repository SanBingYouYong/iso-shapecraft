{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA prism with two parallel polygonal bases."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nimport math\n\ndef create_prism(base_vertices, height):\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Prism\")\n    obj = bpy.data.objects.new(\"Prism\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to build the geometry\n    bm = bmesh.new()\n\n    # Create the base vertices\n    base_faces = []\n    for i, (x, y) in enumerate(base_vertices):\n        v = bm.verts.new((x, y, 0))\n        base_faces.append(v)\n\n    # Create the top vertices\n    top_faces = []\n    for v in base_faces:\n        v_top = bm.verts.new((v.co.x, v.co.y, height))\n        top_faces.append(v_top)\n\n    # Create faces for the bottom and top bases\n    bmesh.faces.new(base_faces)\n    bmesh.faces.new(top_faces)\n\n    # Create the side faces\n    for i in range(len(base_faces)):\n        next_i = (i + 1) % len(base_faces)\n        verts = [base_faces[i], base_faces[next_i], top_faces[next_i], top_faces[i]]\n        bmesh.faces.new(verts)\n\n    # Update the mesh and free the bmesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Example parameters for a hexagonal prism\nhexagon_vertices = [(math.cos(math.radians(angle)), math.sin(math.radians(angle)), 0) for angle in range(0, 360, 60)]\ncreate_prism(hexagon_vertices, 2)\n```"}]}