{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA heart shape with a rounded top and a pointed bottom."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nimport math\n\ndef create_heart_shape():\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"HeartMesh\")\n    obj = bpy.data.objects.new(\"Heart\", mesh)\n    \n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n    \n    # Create the bmesh for the heart shape\n    bm = bmesh.new()\n    \n    # Define heart shape parameters\n    scale = 1.0\n    segments = 32\n    height = 1.5\n\n    # Create vertices for the heart shape\n    for i in range(segments + 1):\n        theta = i * (math.pi / 2) / segments\n        x = (scale * 16 * math.sin(theta) ** 3) / 16\n        y = (scale * (13 * math.cos(theta) - 5 * math.cos(2 * theta) - 2 * math.cos(3 * theta) - math.cos(4 * theta))) / 16\n        z = -height * (1 - (i / segments))  # Create a pointed bottom\n\n        bmesh.ops.create_vert(bm, co=(x, y, z))\n\n    # Create faces\n    verts = [v for v in bm.verts]\n    for i in range(segments):\n        v1 = verts[i]\n        v2 = verts[i + 1]\n        v3 = verts[0]  # Connect to the first vertex for the base face\n        bmesh.ops.create_face(bm, verts=[v1, v2, v3])\n\n    # Finish the bmesh and write to mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\ncreate_heart_shape()\n```"}]}