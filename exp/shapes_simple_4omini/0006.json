{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nAn octagon with eight sides of equal length."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\nfrom math import radians\n\ndef create_octagon(size):\n    # Create a new mesh and a new object\n    mesh = bpy.data.meshes.new(\"Octagon\")\n    obj = bpy.data.objects.new(\"Octagon\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create a bmesh to define the octagon geometry\n    bm = bmesh.new()\n    \n    # Calculate the angle for each vertex\n    angle = 360 / 8\n    vertices = []\n\n    for i in range(8):\n        x = size * cos(radians(i * angle))\n        y = size * sin(radians(i * angle))\n        vertices.append(bm.verts.new((x, y, 0)))\n\n    # Create the faces of the octagon\n    bm.faces.new(vertices)\n\n    # Write the bmesh data to the mesh\n    bm.to_mesh(mesh)\n    bm.free()\n\n# Call the function with the desired size of the octagon\ncreate_octagon(1)\n```"}]}