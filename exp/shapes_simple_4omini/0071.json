{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA parallelogram with obtuse and acute angles."}, {"role": "assistant", "content": "```python\nimport bpy\nimport math\n\ndef create_parallelogram(length, width, angle):\n    # Clear existing mesh objects\n    bpy.ops.object.select_all(action='DESELECT')\n    bpy.ops.object.select_by_type(type='MESH')\n    bpy.ops.object.delete()\n\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"Parallelogram\")\n    obj = bpy.data.objects.new(\"Parallelogram\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Define the vertices of the parallelogram\n    angle_rad = math.radians(angle)\n    vertices = [\n        (0, 0, 0),  # Bottom-left\n        (length, 0, 0),  # Bottom-right\n        (length - width * math.cos(angle_rad), width * math.sin(angle_rad), 0),  # Top-right\n        (-width * math.cos(angle_rad), width * math.sin(angle_rad), 0)  # Top-left\n    ]\n\n    # Define the faces\n    faces = [(0, 1, 2, 3)]\n\n    # Create the mesh from the vertices and faces\n    mesh.from_pydata(vertices, [], faces)\n    mesh.update()\n\n# Parameters: length, width, angle (in degrees)\ncreate_parallelogram(2, 1, 60)\n```"}]}