{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA red sphere"}, {"role": "assistant", "content": "```python\nimport bpy\n\ndef create_red_sphere():\n    # Create a new sphere mesh\n    bpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))\n    \n    # Get the created sphere object\n    sphere = bpy.context.object\n    \n    # Create a new material\n    material = bpy.data.materials.new(name=\"RedMaterial\")\n    material.diffuse_color = (1, 0, 0, 1)  # RGBA for red color\n    \n    # Assign the material to the sphere\n    if sphere.data.materials:\n        sphere.data.materials[0] = material\n    else:\n        sphere.data.materials.append(material)\n\ncreate_red_sphere()\n```"}]}