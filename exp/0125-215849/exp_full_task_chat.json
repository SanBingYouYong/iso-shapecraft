{"messages": [{"role": "user", "content": "# Shape Program Generation Instruction\n\n**Objective:** Given the user prompt describing a 3D shape, enerate a code snippet in the target programming language to produce the shape described. The generated code should:\n1. Align with the component description.\n2. Be syntactically correct, functional, can be executed stand-alone or be called as a method. \n3. Produce a 3D representation consistent with the intended design.\n\n**Output Format:** \n[code snippet (provide code only)]\n\nUse the following code structure:\n```python\nimport bpy\n\ndef your_function(<any parameters>):\n    <your code>\n\nyour_function(<parameters>)\n\n```\n\n# Shape Description\ncoding language: Python\nshape engine: Blender\nA tall, hexagonal prism with a base edge length of 5 units and a height of 15 units. Its edges are sharp, and its surfaces are smooth."}, {"role": "assistant", "content": "```python\nimport bpy\nimport bmesh\n\ndef create_hexagonal_prism(base_edge_length=5, height=15):\n    # Calculate the vertices of the hexagonal base\n    vertices = []\n    for i in range(6):\n        angle = i * (360 / 6) * (3.14159 / 180)  # Convert degrees to radians\n        x = base_edge_length * bpy.mathutils.cos(angle)\n        y = base_edge_length * bpy.mathutils.sin(angle)\n        vertices.append((x, y, 0))  # Base vertices at z=0\n        vertices.append((x, y, height))  # Top vertices at z=height\n\n    # Create a new mesh and object\n    mesh = bpy.data.meshes.new(\"HexagonalPrism\")\n    obj = bpy.data.objects.new(\"HexagonalPrism\", mesh)\n\n    # Link the object to the scene\n    bpy.context.collection.objects.link(obj)\n\n    # Create the mesh from the vertices and faces\n    faces = [\n        (0, 1, 3, 2), (4, 5, 7, 6),  # Side faces\n        (0, 1, 5, 4), (1, 2, 6, 5),\n        (2, 3, 7, 6), (3, 0, 4, 7)   # Top and bottom faces\n    ]\n    \n    # Create mesh from the vertices and faces\n    mesh.from_pydata(vertices, [], faces)\n    mesh.update()\n\n    # Set shading to smooth\n    bpy.ops.object.shade_smooth()\n\ncreate_hexagonal_prism()\n```"}]}